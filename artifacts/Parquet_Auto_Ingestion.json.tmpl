{
    "name": "Parquet Auto Ingestion",
    "properties": {
        "activities": [
            {
                "name": "Runtime Variables",
                "type": "SetVariable",
                "dependsOn": [],
                "userProperties": [],
                "typeProperties": {
                    "variableName": "PipelineValues",
                    "value": {
                        "value": "@array(json(concat('{\n\"PipelineRunId\": \"', pipeline().RunId ,'\"'\n,',\"PipelineStartDate\": \"', formatDateTime(convertFromUtc(pipeline().TriggerTime, 'Eastern Standard Time'), 'yyyyMMdd'), '\"'\n,',\"PipelineStartDateTime\": \"', formatDateTime(convertFromUtc(pipeline().TriggerTime, 'Eastern Standard Time'), 'yyyy-MM-dd HH:mm:ss'), '\"'\n,'}')))",
                        "type": "Expression"
                    }
                }
            },
            {
                "name": "Schema Creation Loop",
                "type": "ForEach",
                "dependsOn": [
                    {
                        "activity": "Filter - Schema Metadata",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    }
                ],
                "userProperties": [],
                "typeProperties": {
                    "items": {
                        "value": "@activity('Filter - Schema Metadata').output.value",
                        "type": "Expression"
                    },
                    "batchCount": 50,
                    "activities": [
                        {
                            "name": "Creates Schemas",
                            "type": "Lookup",
                            "dependsOn": [],
                            "policy": {
                                "timeout": "7.00:00:00",
                                "retry": 0,
                                "retryIntervalInSeconds": 30,
                                "secureOutput": false,
                                "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                                "source": {
                                    "type": "SqlDWSource",
                                    "sqlReaderQuery": {
                                        "value": "@CONCAT('EXECUTE AS user = ''Userstaticrc10'' \nIF NOT EXISTS (SELECT 1 FROM sys.schemas WHERE [name] = ''', item().SchemaNameStaging, ''') EXEC(''CREATE SCHEMA ', item().SchemaNameStaging, ''');SELECT 1 AS a')",
                                        "type": "Expression"
                                    },
                                    "queryTimeout": "24:00:00",
                                    "partitionOption": "None"
                                },
                                "dataset": {
                                    "referenceName": "DS_Synapse_Managed_Identity",
                                    "type": "DatasetReference",
                                    "parameters": {
                                        "ServerName": {
                                            "value": "@concat(pipeline().DataFactory, '.sql.azuresynapse.net')",
                                            "type": "Expression"
                                        },
                                        "DatabaseName": {
                                            "value": "@variables('DatabaseName')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "firstRowOnly": false
                            }
                        },
                        {
                            "name": "Log Schema Creation",
                            "type": "Lookup",
                            "dependsOn": [],
                            "policy": {
                                "timeout": "7.00:00:00",
                                "retry": 0,
                                "retryIntervalInSeconds": 30,
                                "secureOutput": false,
                                "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                                "source": {
                                    "type": "SqlDWSource",
                                    "sqlReaderQuery": {
                                        "value": "@concat('\nEXECUTE AS user = ''Userstaticrc10'' \n\nDECLARE @CurrentDateTime DATETIME2(0) = GETDATE() \n\nINSERT INTO logging.AutoIngestion VALUES \n(''', variables('PipelineValues')[0].PipelineRunId, ''' /* PipelineRunId */\n,''', pipeline().Pipeline, ''' /* PipelineName */\n,''',variables('PipelineValues')[0].PipelineStartDate, ''' /* PipelineStartDate */\n,''', variables('PipelineValues')[0].PipelineStartDateTime, ''' /* PipelineStartDateTime */\n,''', pipeline().parameters.StorageAccountNameMetadata, ''' /* StorageAccountNameMetadata */\n\n,NULL /* SchemaNameStaging */\n,NULL /* TableNameStaging */\n,''', item().FolderPathFull, ''' /* FolderPathFull */\n,''', item().SchemaNameStaging, ''' /* SchemaNameTarget */\n,NULL /* TableNameTarget */\n,NULL /* TableDistributionTarget */\n,NULL /* TableIndexTarget */\n\n,''Create Schema'' /* ActivityType */\n,''', replace(CONCAT('EXECUTE AS user = ''Userstaticrc10'' IF NOT EXISTS (SELECT 1 FROM sys.schemas WHERE [name] = ''', item().SchemaNameStaging, ''') EXEC(''CREATE SCHEMA ', item().SchemaNameStaging, ''');'), '''', ''''''), ''' /* SqlCommand */\n,@CurrentDateTime /* RowInsertDateTime */\n)\n;\nSELECT 1 AS a\n;\n')",
                                        "type": "Expression"
                                    },
                                    "queryTimeout": "24:00:00",
                                    "partitionOption": "None"
                                },
                                "dataset": {
                                    "referenceName": "DS_Synapse_Managed_Identity",
                                    "type": "DatasetReference",
                                    "parameters": {
                                        "ServerName": {
                                            "value": "@concat(pipeline().DataFactory, '.sql.azuresynapse.net')",
                                            "type": "Expression"
                                        },
                                        "DatabaseName": {
                                            "value": "@variables('DatabaseName')",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            {
                "name": "Table Creation Loop",
                "type": "ForEach",
                "dependsOn": [
                    {
                        "activity": "Filter - Table Metadata",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    },
                    {
                        "activity": "Schema Creation Loop",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    }
                ],
                "userProperties": [],
                "typeProperties": {
                    "items": {
                        "value": "@activity('Filter - Table Metadata').output.value",
                        "type": "Expression"
                    },
                    "batchCount": 50,
                    "activities": [
                        {
                            "name": "Create Staging Table DDL - Serverless",
                            "type": "Lookup",
                            "dependsOn": [],
                            "policy": {
                                "timeout": "7.00:00:00",
                                "retry": 0,
                                "retryIntervalInSeconds": 30,
                                "secureOutput": false,
                                "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                                "source": {
                                    "type": "SqlDWSource",
                                    "sqlReaderQuery": {
                                        "value": "@replace(replace(replace(variables('SqlCommandCreateStagingTable'), '{SchemaNameStaging}', item().SchemaNameStaging)\n, '{TableNameStaging}', item().TableNameStaging)\n,  '{FolderPathFull}', item().FolderPathFull) ",
                                        "type": "Expression"
                                    },
                                    "queryTimeout": "24:00:00",
                                    "partitionOption": "None"
                                },
                                "dataset": {
                                    "referenceName": "DS_Synapse_Managed_Identity",
                                    "type": "DatasetReference",
                                    "parameters": {
                                        "ServerName": {
                                            "value": "@concat(pipeline().DataFactory, '-ondemand.sql.azuresynapse.net')",
                                            "type": "Expression"
                                        },
                                        "DatabaseName": "master"
                                    }
                                },
                                "firstRowOnly": false
                            }
                        },
                        {
                            "name": "Create Staging Tables",
                            "type": "Lookup",
                            "dependsOn": [
                                {
                                    "activity": "Create Staging Table DDL - Serverless",
                                    "dependencyConditions": [
                                        "Succeeded"
                                    ]
                                }
                            ],
                            "policy": {
                                "timeout": "7.00:00:00",
                                "retry": 0,
                                "retryIntervalInSeconds": 30,
                                "secureOutput": false,
                                "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                                "source": {
                                    "type": "SqlDWSource",
                                    "sqlReaderQuery": {
                                        "value": "@concat('EXECUTE AS user = ''Userstaticrc10'' ', activity('Create Staging Table DDL - Serverless').output.value[0].CreateTableDDL, '; SELECT 1 AS a')",
                                        "type": "Expression"
                                    },
                                    "queryTimeout": "24:00:00",
                                    "partitionOption": "None"
                                },
                                "dataset": {
                                    "referenceName": "DS_Synapse_Managed_Identity",
                                    "type": "DatasetReference",
                                    "parameters": {
                                        "ServerName": {
                                            "value": "@concat(pipeline().DataFactory, '.sql.azuresynapse.net')",
                                            "type": "Expression"
                                        },
                                        "DatabaseName": {
                                            "value": "@variables('DatabaseName')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "firstRowOnly": false
                            }
                        },
                        {
                            "name": "Log Staging Table Creation",
                            "type": "Lookup",
                            "dependsOn": [
                                {
                                    "activity": "Create Staging Table DDL - Serverless",
                                    "dependencyConditions": [
                                        "Succeeded"
                                    ]
                                }
                            ],
                            "policy": {
                                "timeout": "7.00:00:00",
                                "retry": 0,
                                "retryIntervalInSeconds": 30,
                                "secureOutput": false,
                                "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                                "source": {
                                    "type": "SqlDWSource",
                                    "sqlReaderQuery": {
                                        "value": "@concat('\nEXECUTE AS user = ''Userstaticrc10'' \n\nDECLARE @CurrentDateTime DATETIME2(0) = GETDATE() \n\nINSERT INTO logging.AutoIngestion VALUES \n(''', variables('PipelineValues')[0].PipelineRunId, ''' /* PipelineRunId */\n,''', pipeline().Pipeline, ''' /* PipelineName */\n,''',variables('PipelineValues')[0].PipelineStartDate, ''' /* PipelineStartDate */\n,''', variables('PipelineValues')[0].PipelineStartDateTime, ''' /* PipelineStartDateTime */\n,''', pipeline().parameters.StorageAccountNameMetadata, ''' /* StorageAccountNameMetadata */\n\n,''', item().SchemaNameStaging, ''' /* SchemaNameStaging */\n,''', item().TableNameStaging, ''' /* TableNameStaging */\n,''', item().FolderPathFull, ''' /* FolderPathFull */\n,NULL /* SchemaNameTarget */\n,NULL /* TableNameTarget */\n,NULL /* TableDistributionTarget */\n,NULL /* TableIndexTarget */\n\n,''Create Staging Table'' /* ActivityType */\n,''', replace(concat('EXECUTE AS user = ''Userstaticrc10'' ', activity('Create Staging Table DDL - Serverless').output.value[0].CreateTableDDL), '''', ''''''), ''' /* SqlCommand */\n,@CurrentDateTime /* RowInsertDateTime */\n)\n;\nSELECT 1 AS a\n;\n')",
                                        "type": "Expression"
                                    },
                                    "queryTimeout": "24:00:00",
                                    "partitionOption": "None"
                                },
                                "dataset": {
                                    "referenceName": "DS_Synapse_Managed_Identity",
                                    "type": "DatasetReference",
                                    "parameters": {
                                        "ServerName": {
                                            "value": "@concat(pipeline().DataFactory, '.sql.azuresynapse.net')",
                                            "type": "Expression"
                                        },
                                        "DatabaseName": {
                                            "value": "@variables('DatabaseName')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "firstRowOnly": false
                            }
                        },
                        {
                            "name": "Execute COPY INTO Staging Statement",
                            "type": "Lookup",
                            "dependsOn": [
                                {
                                    "activity": "Create Staging Tables",
                                    "dependencyConditions": [
                                        "Succeeded"
                                    ]
                                }
                            ],
                            "policy": {
                                "timeout": "7.00:00:00",
                                "retry": 0,
                                "retryIntervalInSeconds": 30,
                                "secureOutput": false,
                                "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                                "source": {
                                    "type": "SqlDWSource",
                                    "sqlReaderQuery": {
                                        "value": "@CONCAT('EXECUTE AS user = ''Userstaticrc10'' COPY INTO [', item().SchemaNameStaging, '].[', item().TableNameStaging, '] FROM ''', item().FolderPathFull, ''' WITH ( FILE_TYPE = ''PARQUET'', MAXERRORS = 0, COMPRESSION = ''snappy'', IDENTITY_INSERT = ''OFF'', CREDENTIAL = (IDENTITY = ''Managed Identity'')) OPTION (LABEL = ''COPY - [', item().SchemaNameStaging, '].[', item().TableNameStaging, '] - ', variables('PipelineValues')[0].PipelineRunId, ''');SELECT 1 AS a')\n",
                                        "type": "Expression"
                                    },
                                    "queryTimeout": "24:00:00",
                                    "partitionOption": "None"
                                },
                                "dataset": {
                                    "referenceName": "DS_Synapse_Managed_Identity",
                                    "type": "DatasetReference",
                                    "parameters": {
                                        "ServerName": {
                                            "value": "@concat(pipeline().DataFactory, '.sql.azuresynapse.net')",
                                            "type": "Expression"
                                        },
                                        "DatabaseName": {
                                            "value": "@variables('DatabaseName')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "firstRowOnly": false
                            }
                        },
                        {
                            "name": "Log COPY INTO Staging Execution",
                            "type": "Lookup",
                            "dependsOn": [
                                {
                                    "activity": "Create Staging Tables",
                                    "dependencyConditions": [
                                        "Succeeded"
                                    ]
                                }
                            ],
                            "policy": {
                                "timeout": "7.00:00:00",
                                "retry": 0,
                                "retryIntervalInSeconds": 30,
                                "secureOutput": false,
                                "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                                "source": {
                                    "type": "SqlDWSource",
                                    "sqlReaderQuery": {
                                        "value": "@concat('\nDECLARE @CurrentDateTime DATETIME2(0) = GETDATE() \n\nINSERT INTO logging.AutoIngestion VALUES \n(''', variables('PipelineValues')[0].PipelineRunId, ''' /* PipelineRunId */\n,''', pipeline().Pipeline, ''' /* PipelineName */\n,''',variables('PipelineValues')[0].PipelineStartDate, ''' /* PipelineStartDate */\n,''', variables('PipelineValues')[0].PipelineStartDateTime, ''' /* PipelineStartDateTime */\n,''', pipeline().parameters.StorageAccountNameMetadata, ''' /* StorageAccountNameMetadata */\n\n,''', item().SchemaNameStaging, ''' /* SchemaNameStaging */\n,''', item().TableNameStaging, ''' /* TableNameStaging */\n,''', item().FolderPathFull, ''' /* FolderPathFull */\n,NULL /* SchemaNameTarget */\n,NULL /* TableNameTarget */\n,NULL /* TableDistributionTarget */\n,NULL /* TableIndexTarget */\n\n,''Copy Into Staging Table'' /* ActivityType */\n,''', replace(CONCAT('EXECUTE AS user = ''Userstaticrc10'' COPY INTO [', item().SchemaNameStaging, '].[', item().TableNameStaging, '] FROM ''', item().FolderPathFull, ''' WITH ( FILE_TYPE = ''PARQUET'', MAXERRORS = 0, COMPRESSION = ''snappy'', IDENTITY_INSERT = ''OFF'', CREDENTIAL = (IDENTITY = ''Managed Identity''));'), '''', ''''''), ''' /* SqlCommand */\n,@CurrentDateTime /* RowInsertDateTime */\n)\n;\nSELECT 1 AS a\n;\n')",
                                        "type": "Expression"
                                    },
                                    "queryTimeout": "24:00:00",
                                    "partitionOption": "None"
                                },
                                "dataset": {
                                    "referenceName": "DS_Synapse_Managed_Identity",
                                    "type": "DatasetReference",
                                    "parameters": {
                                        "ServerName": {
                                            "value": "@concat(pipeline().DataFactory, '.sql.azuresynapse.net')",
                                            "type": "Expression"
                                        },
                                        "DatabaseName": {
                                            "value": "@variables('DatabaseName')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "firstRowOnly": false
                            }
                        },
                        {
                            "name": "Get Resource Class Required",
                            "type": "Lookup",
                            "dependsOn": [
                                {
                                    "activity": "Execute COPY INTO Staging Statement",
                                    "dependencyConditions": [
                                        "Succeeded"
                                    ]
                                }
                            ],
                            "policy": {
                                "timeout": "7.00:00:00",
                                "retry": 0,
                                "retryIntervalInSeconds": 30,
                                "secureOutput": false,
                                "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                                "source": {
                                    "type": "SqlDWSource",
                                    "sqlReaderQuery": {
                                        "value": "@concat(replace(replace(replace(variables('GetResourceClass')\n, '{SchemaNameStaging}', item().SchemaNameStaging)\n, '{TableNameStaging}', item().TableNameStaging)\n, '{PipelineId}', variables('PipelineValues')[0].PipelineRunId)\n)",
                                        "type": "Expression"
                                    },
                                    "queryTimeout": "24:00:00",
                                    "partitionOption": "None"
                                },
                                "dataset": {
                                    "referenceName": "DS_Synapse_Managed_Identity",
                                    "type": "DatasetReference",
                                    "parameters": {
                                        "ServerName": {
                                            "value": "@concat(pipeline().DataFactory, '.sql.azuresynapse.net')",
                                            "type": "Expression"
                                        },
                                        "DatabaseName": {
                                            "value": "@variables('DatabaseName')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "firstRowOnly": true
                            }
                        },
                        {
                            "name": "Determine Final Table Distribution",
                            "description": "Determine if the table distribution was defined by the user in the metadata file.",
                            "type": "IfCondition",
                            "dependsOn": [
                                {
                                    "activity": "Get Resource Class Required",
                                    "dependencyConditions": [
                                        "Succeeded"
                                    ]
                                }
                            ],
                            "userProperties": [],
                            "typeProperties": {
                                "expression": {
                                    "value": "@equals(coalesce(item().TableDistributionTarget, ''), '')",
                                    "type": "Expression"
                                },
                                "ifFalseActivities": [
                                    {
                                        "name": "Log Final Table Creation - Defined Distribution",
                                        "type": "Lookup",
                                        "dependsOn": [],
                                        "policy": {
                                            "timeout": "7.00:00:00",
                                            "retry": 0,
                                            "retryIntervalInSeconds": 30,
                                            "secureOutput": false,
                                            "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                            "source": {
                                                "type": "SqlDWSource",
                                                "sqlReaderQuery": {
                                                    "value": "@concat('\nDECLARE @CurrentDateTime DATETIME2(0) = GETDATE() \n\nINSERT INTO logging.AutoIngestion VALUES \n(''', variables('PipelineValues')[0].PipelineRunId, ''' /* PipelineRunId */\n,''', pipeline().Pipeline, ''' /* PipelineName */\n,''',variables('PipelineValues')[0].PipelineStartDate, ''' /* PipelineStartDate */\n,''', variables('PipelineValues')[0].PipelineStartDateTime, ''' /* PipelineStartDateTime */\n,''', pipeline().parameters.StorageAccountNameMetadata, ''' /* StorageAccountNameMetadata */\n\n,''', item().SchemaNameStaging, ''' /* SchemaNameStaging */\n,''', item().TableNameStaging, ''' /* TableNameStaging */\n,NULL /* FolderPathFull */\n,''', item().SchemaNameTarget, ''' /* SchemaNameTarget */\n,''', item().TableNameTarget, ''' /* TableNameTarget */\n,''', item().TableDistributionTarget, ''' /* TableDistributionTarget */\n,''', item().TableIndexTarget, ''' /* TableIndexTarget */\n\n,''CTAS Final Table'' /* ActivityType */\n,''', replace(CONCAT('/*User Defined Distribution/Index*/ EXECUTE AS user = ''', activity('Get Resource Class Required').output.firstRow.UserName\n\t, ''' IF OBJECT_ID(''', item().SchemaNameTarget, '.', item().TableNameTarget, ''', ''U'') IS NOT NULL DROP TABLE [', item().SchemaNameTarget, '].[', item().TableNameTarget\n\t, ']; CREATE TABLE [', item().SchemaNameTarget, '].[', item().TableNameTarget, '] WITH (DISTRIBUTION = ', item().TableDistributionTarget, ' , ', item().TableIndexTarget,' ) AS SELECT * FROM [', item().SchemaNameStaging, '].[', item().TableNameStaging, '];'), '''', ''''''), ''' /* SqlCommand */\n,@CurrentDateTime /* RowInsertDateTime */\n)\n;\nSELECT 1 AS a\n;\n')",
                                                    "type": "Expression"
                                                },
                                                "queryTimeout": "24:00:00",
                                                "partitionOption": "None"
                                            },
                                            "dataset": {
                                                "referenceName": "DS_Synapse_Managed_Identity",
                                                "type": "DatasetReference",
                                                "parameters": {
                                                    "ServerName": {
                                                        "value": "@concat(pipeline().DataFactory, '.sql.azuresynapse.net')",
                                                        "type": "Expression"
                                                    },
                                                    "DatabaseName": {
                                                        "value": "@variables('DatabaseName')",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            "firstRowOnly": false
                                        }
                                    },
                                    {
                                        "name": "Create Final Tables - Defined Distribution",
                                        "type": "Lookup",
                                        "dependsOn": [],
                                        "policy": {
                                            "timeout": "7.00:00:00",
                                            "retry": 0,
                                            "retryIntervalInSeconds": 30,
                                            "secureOutput": false,
                                            "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                            "source": {
                                                "type": "SqlDWSource",
                                                "sqlReaderQuery": {
                                                    "value": "@CONCAT('/*User Defined Distribution/Index*/ EXECUTE AS user = ''', activity('Get Resource Class Required').output.firstRow.UserName\n, ''' IF OBJECT_ID(''', item().SchemaNameTarget, '.', item().TableNameTarget, ''', ''U'') IS NOT NULL DROP TABLE [', item().SchemaNameTarget, '].[', item().TableNameTarget\n, ']; CREATE TABLE [', item().SchemaNameTarget, '].[', item().TableNameTarget, '] WITH (DISTRIBUTION = ', item().TableDistributionTarget, ' , ', item().TableIndexTarget,' ) AS SELECT * FROM [', item().SchemaNameStaging, '].[', item().TableNameStaging, ']  OPTION (LABEL = ''CTAS - [', item().SchemaNameStaging, '].[', item().TableNameStaging, '] - ', variables('PipelineValues')[0].PipelineRunId, ''');SELECT 1 AS a')",
                                                    "type": "Expression"
                                                },
                                                "queryTimeout": "24:00:00",
                                                "partitionOption": "None"
                                            },
                                            "dataset": {
                                                "referenceName": "DS_Synapse_Managed_Identity",
                                                "type": "DatasetReference",
                                                "parameters": {
                                                    "ServerName": {
                                                        "value": "@concat(pipeline().DataFactory, '.sql.azuresynapse.net')",
                                                        "type": "Expression"
                                                    },
                                                    "DatabaseName": {
                                                        "value": "@variables('DatabaseName')",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            "firstRowOnly": false
                                        }
                                    }
                                ],
                                "ifTrueActivities": [
                                    {
                                        "name": "Profile Staging Table",
                                        "description": "Profile the staging table and try to determine the best distribution.",
                                        "type": "Lookup",
                                        "dependsOn": [],
                                        "policy": {
                                            "timeout": "7.00:00:00",
                                            "retry": 0,
                                            "retryIntervalInSeconds": 30,
                                            "secureOutput": false,
                                            "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                            "source": {
                                                "type": "SqlDWSource",
                                                "sqlReaderQuery": {
                                                    "value": "@concat(replace(replace(replace(replace(replace(replace(variables('CTAS')\n\t, '{ResourceClassName}', activity('Get Resource Class Required').output.firstRow.UserName)\n\t, '{SchemaNameStaging}', item().SchemaNameStaging)\n\t, '{TableNameStaging}', item().TableNameStaging)\n\t, '{PipelineRunId}', variables('PipelineValues')[0].PipelineRunId)\n\t, '{PipelineStartDate}', variables('PipelineValues')[0].PipelineStartDate)\n\t, '{PipelineStartDateTime}', variables('PipelineValues')[0].PipelineStartDateTime)\n)",
                                                    "type": "Expression"
                                                },
                                                "queryTimeout": "24:00:00",
                                                "partitionOption": "None"
                                            },
                                            "dataset": {
                                                "referenceName": "DS_Synapse_Managed_Identity",
                                                "type": "DatasetReference",
                                                "parameters": {
                                                    "ServerName": {
                                                        "value": "@concat(pipeline().DataFactory, '.sql.azuresynapse.net')",
                                                        "type": "Expression"
                                                    },
                                                    "DatabaseName": {
                                                        "value": "@variables('DatabaseName')",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "name": "Log Final Table Creation - Auto Distribution and Index",
                                        "type": "Lookup",
                                        "dependsOn": [
                                            {
                                                "activity": "Profile Staging Table",
                                                "dependencyConditions": [
                                                    "Succeeded"
                                                ]
                                            }
                                        ],
                                        "policy": {
                                            "timeout": "7.00:00:00",
                                            "retry": 0,
                                            "retryIntervalInSeconds": 30,
                                            "secureOutput": false,
                                            "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                            "source": {
                                                "type": "SqlDWSource",
                                                "sqlReaderQuery": {
                                                    "value": "@concat('\nDECLARE @CurrentDateTime DATETIME2(0) = GETDATE() \n\nINSERT INTO logging.AutoIngestion VALUES \n(''', variables('PipelineValues')[0].PipelineRunId, ''' /* PipelineRunId */\n,''', pipeline().Pipeline, ''' /* PipelineName */\n,''',variables('PipelineValues')[0].PipelineStartDate, ''' /* PipelineStartDate */\n,''', variables('PipelineValues')[0].PipelineStartDateTime, ''' /* PipelineStartDateTime */\n,''', pipeline().parameters.StorageAccountNameMetadata, ''' /* StorageAccountNameMetadata */\n\n,''', item().SchemaNameStaging, ''' /* SchemaNameStaging */\n,''', item().TableNameStaging, ''' /* TableNameStaging */\n,NULL /* FolderPathFull */\n,''', item().SchemaNameTarget, ''' /* SchemaNameTarget */\n,''', item().TableNameTarget, ''' /* TableNameTarget */\n,''', item().TableDistributionTarget, ''' /* TableDistributionTarget */\n,''', item().TableIndexTarget, ''' /* TableIndexTarget */\n\n,''CTAS Final Table'' /* ActivityType */\n,''', replace(CONCAT('/*Auto Distribution/Index*/ EXECUTE AS user = ''', activity('Get Resource Class Required').output.firstRow.UserName\n\t, ''' IF OBJECT_ID(''', item().SchemaNameTarget, '.', item().TableNameTarget, ''', ''U'') IS NOT NULL DROP TABLE [', item().SchemaNameTarget, '].[', item().TableNameTarget\n\t, ']; CREATE TABLE [', item().SchemaNameTarget, '].[', item().TableNameTarget, '] ', activity('Profile Staging Table').output.firstRow.DistributionIndex,' AS SELECT * FROM [', item().SchemaNameStaging, '].[', item().TableNameStaging, '];'), '''', ''''''), ''' /* SqlCommand */\n,@CurrentDateTime /* RowInsertDateTime */\n)\n;\nSELECT 1 AS a\n;\n')",
                                                    "type": "Expression"
                                                },
                                                "queryTimeout": "24:00:00",
                                                "partitionOption": "None"
                                            },
                                            "dataset": {
                                                "referenceName": "DS_Synapse_Managed_Identity",
                                                "type": "DatasetReference",
                                                "parameters": {
                                                    "ServerName": {
                                                        "value": "@concat(pipeline().DataFactory, '.sql.azuresynapse.net')",
                                                        "type": "Expression"
                                                    },
                                                    "DatabaseName": {
                                                        "value": "@variables('DatabaseName')",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            "firstRowOnly": false
                                        }
                                    },
                                    {
                                        "name": "Create Final Tables - Auto Distribution and Index",
                                        "type": "Lookup",
                                        "dependsOn": [
                                            {
                                                "activity": "Profile Staging Table",
                                                "dependencyConditions": [
                                                    "Succeeded"
                                                ]
                                            }
                                        ],
                                        "policy": {
                                            "timeout": "7.00:00:00",
                                            "retry": 0,
                                            "retryIntervalInSeconds": 30,
                                            "secureOutput": false,
                                            "secureInput": false
                                        },
                                        "userProperties": [],
                                        "typeProperties": {
                                            "source": {
                                                "type": "SqlDWSource",
                                                "sqlReaderQuery": {
                                                    "value": "@CONCAT('/*Auto Distribution/Index*/ EXECUTE AS user = ''', activity('Get Resource Class Required').output.firstRow.UserName\n, ''' IF OBJECT_ID(''', item().SchemaNameTarget, '.', item().TableNameTarget, ''', ''U'') IS NOT NULL DROP TABLE [', item().SchemaNameTarget, '].[', item().TableNameTarget\n, ']; CREATE TABLE [', item().SchemaNameTarget, '].[', item().TableNameTarget, '] ', activity('Profile Staging Table').output.firstRow.DistributionIndex,' AS SELECT * FROM [', item().SchemaNameStaging, '].[', item().TableNameStaging, ']  OPTION (LABEL = ''CTAS - [', item().SchemaNameStaging, '].[', item().TableNameStaging, '] - ', variables('PipelineValues')[0].PipelineRunId, ''');SELECT 1 AS a')\n",
                                                    "type": "Expression"
                                                },
                                                "queryTimeout": "24:00:00",
                                                "partitionOption": "None"
                                            },
                                            "dataset": {
                                                "referenceName": "DS_Synapse_Managed_Identity",
                                                "type": "DatasetReference",
                                                "parameters": {
                                                    "ServerName": {
                                                        "value": "@concat(pipeline().DataFactory, '.sql.azuresynapse.net')",
                                                        "type": "Expression"
                                                    },
                                                    "DatabaseName": {
                                                        "value": "@variables('DatabaseName')",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            "firstRowOnly": false
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "Execute Create Statistics Statement",
                            "type": "Lookup",
                            "dependsOn": [
                                {
                                    "activity": "Determine Final Table Distribution",
                                    "dependencyConditions": [
                                        "Succeeded"
                                    ]
                                }
                            ],
                            "policy": {
                                "timeout": "7.00:00:00",
                                "retry": 0,
                                "retryIntervalInSeconds": 30,
                                "secureOutput": false,
                                "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                                "source": {
                                    "type": "SqlDWSource",
                                    "sqlReaderQuery": {
                                        "value": "@concat(replace(replace(variables('SqlCommandStats')\n, '{SchemaNameTarget}', item().SchemaNameTarget)\n, '{TableNameTarget}', item().TableNameTarget)\n, '; SELECT 1 AS a'\n)",
                                        "type": "Expression"
                                    },
                                    "queryTimeout": "24:00:00",
                                    "partitionOption": "None"
                                },
                                "dataset": {
                                    "referenceName": "DS_Synapse_Managed_Identity",
                                    "type": "DatasetReference",
                                    "parameters": {
                                        "ServerName": {
                                            "value": "@concat(pipeline().DataFactory, '.sql.azuresynapse.net')",
                                            "type": "Expression"
                                        },
                                        "DatabaseName": {
                                            "value": "@variables('DatabaseName')",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            }
                        },
                        {
                            "name": "Log Create Statistics Execution",
                            "type": "Lookup",
                            "dependsOn": [
                                {
                                    "activity": "Determine Final Table Distribution",
                                    "dependencyConditions": [
                                        "Succeeded"
                                    ]
                                }
                            ],
                            "policy": {
                                "timeout": "7.00:00:00",
                                "retry": 0,
                                "retryIntervalInSeconds": 30,
                                "secureOutput": false,
                                "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                                "source": {
                                    "type": "SqlDWSource",
                                    "sqlReaderQuery": {
                                        "value": "@concat('\nDECLARE @CurrentDateTime DATETIME2(0) = GETDATE() \n\nINSERT INTO logging.AutoIngestion VALUES \n(''', variables('PipelineValues')[0].PipelineRunId, ''' /* PipelineRunId */\n,''', pipeline().Pipeline, ''' /* PipelineName */\n,''',variables('PipelineValues')[0].PipelineStartDate, ''' /* PipelineStartDate */\n,''', variables('PipelineValues')[0].PipelineStartDateTime, ''' /* PipelineStartDateTime */\n,''', pipeline().parameters.StorageAccountNameMetadata, ''' /* StorageAccountNameMetadata */\n\n,NULL /* SchemaNameStaging */\n,NULL /* TableNameStaging */\n,NULL /* FolderPathFull */\n,''', item().SchemaNameTarget, ''' /* SchemaNameTarget */\n,''', item().TableNameTarget, ''' /* TableNameTarget */\n,NULL /* TableDistributionTarget */\n,NULL /* TableIndexTarget */\n\n,''Stats'' /* ActivityType */\n,''', replace(replace(replace(variables('SqlCommandStats'), '{SchemaNameTarget}', item().SchemaNameTarget)\n\t, '{TableNameTarget}', item().TableNameTarget), '''', ''''''), ''' /* SqlCommand */\n,@CurrentDateTime /* RowInsertDateTime */\n)\n;\nSELECT 1 AS a\n;\n')",
                                        "type": "Expression"
                                    },
                                    "queryTimeout": "24:00:00",
                                    "partitionOption": "None"
                                },
                                "dataset": {
                                    "referenceName": "DS_Synapse_Managed_Identity",
                                    "type": "DatasetReference",
                                    "parameters": {
                                        "ServerName": {
                                            "value": "@concat(pipeline().DataFactory, '.sql.azuresynapse.net')",
                                            "type": "Expression"
                                        },
                                        "DatabaseName": {
                                            "value": "@variables('DatabaseName')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "firstRowOnly": false
                            }
                        },
                        {
                            "name": "Build Table if Replicate",
                            "type": "Lookup",
                            "dependsOn": [
                                {
                                    "activity": "Execute Create Statistics Statement",
                                    "dependencyConditions": [
                                        "Succeeded"
                                    ]
                                }
                            ],
                            "policy": {
                                "timeout": "7.00:00:00",
                                "retry": 0,
                                "retryIntervalInSeconds": 30,
                                "secureOutput": false,
                                "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                                "source": {
                                    "type": "SqlDWSource",
                                    "sqlReaderQuery": {
                                        "value": "@concat('\nEXECUTE AS user = ''Userstaticrc10''\n\nDECLARE @sql NVARCHAR(MAX)\n\nSELECT\t\t@sql = CASE WHEN tp.[distribution_policy_desc] = ''REPLICATE'' THEN CONCAT(''SELECT COUNT_BIG(*) FROM ['', s.name, ''].['', t.name, '']'') ELSE NULL END\nFROM\t\tsys.schemas s\nJOIN\t\tsys.tables t\nON\t\t\ts.[schema_id] = t.[schema_id]\nJOIN\t\tsys.indexes i\nON\t\t\tt.[object_id] = i.[object_id]\nAND\t\t\ti.[index_id] <= 1\nJOIN\t\tsys.pdw_table_distribution_properties tp\nON\t\t\tt.[object_id] = tp.[object_id]\nWHERE\t\ts.name = ''', item().SchemaNameTarget, '''\nAND\t\t\tt.name = ''', item().TableNameTarget, '''\n;\n\nIF @sql IS NOT NULL\n\tEXEC (@sql)\n\nSELECT 1 AS a\n')",
                                        "type": "Expression"
                                    },
                                    "queryTimeout": "24:00:00",
                                    "partitionOption": "None"
                                },
                                "dataset": {
                                    "referenceName": "DS_Synapse_Managed_Identity",
                                    "type": "DatasetReference",
                                    "parameters": {
                                        "ServerName": {
                                            "value": "@concat(pipeline().DataFactory, '.sql.azuresynapse.net')",
                                            "type": "Expression"
                                        },
                                        "DatabaseName": {
                                            "value": "@variables('DatabaseName')",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                "firstRowOnly": false
                            }
                        }
                    ]
                }
            },
            {
                "name": "Get Metadata",
                "type": "Lookup",
                "dependsOn": [],
                "policy": {
                    "timeout": "7.00:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "source": {
                        "type": "SqlDWSource",
                        "sqlReaderQuery": {
                            "value": "@concat('\nSELECT *\nFROM\n(\n\tSELECT DISTINCT 1 AS SchemaFlag, ''staging'' AS SchemaNameStaging, NULL AS TableNameStaging, NULL AS FolderPathFull, NULL AS SchemaNameTarget, NULL AS TableNameTarget, NULL AS TableDistributionTarget, NULL AS TableIndexTarget\n\tFROM OPENROWSET\n\t(\n\t\tBULK ''', pipeline().parameters.StorageAccountNameMetadata, '''\n\t\t,FORMAT = ''CSV''\n\t\t,PARSER_VERSION=''2.0''\n\t\t,HEADER_ROW = TRUE\n\t) AS r\n\tUNION\n\tSELECT DISTINCT 1 AS SchemaFlag, SchemaNameTarget, NULL AS TableNameStaging, NULL AS FolderPathFull, NULL AS SchemaNameTarget, NULL AS TableNameTarget, NULL AS TableDistributionTarget, NULL AS TableIndexTarget\n\tFROM OPENROWSET\n\t(\n\t\tBULK ''', pipeline().parameters.StorageAccountNameMetadata, '''\n\t\t,FORMAT = ''CSV''\n\t\t,PARSER_VERSION=''2.0''\n\t\t,HEADER_ROW = TRUE\n\t) AS r\n) AS a\nUNION\nSELECT 0 AS SchemaFlag, ''staging'' AS SchemaNameTarget, TableNameTarget AS TableNameStaging, FolderPathFull, SchemaNameTarget, TableNameTarget, TableDistributionTarget, TableIndexTarget\nFROM OPENROWSET\n(\n    BULK ''', pipeline().parameters.StorageAccountNameMetadata, '''\n    ,FORMAT = ''CSV''\n    ,PARSER_VERSION=''2.0''\n    ,HEADER_ROW = TRUE\n) AS r\n')",
                            "type": "Expression"
                        },
                        "queryTimeout": "24:00:00",
                        "partitionOption": "None"
                    },
                    "dataset": {
                        "referenceName": "DS_Synapse_Managed_Identity",
                        "type": "DatasetReference",
                        "parameters": {
                            "ServerName": {
                                "value": "@concat(pipeline().DataFactory, '-ondemand.sql.azuresynapse.net')",
                                "type": "Expression"
                            },
                            "DatabaseName": "master"
                        }
                    },
                    "firstRowOnly": false
                }
            },
            {
                "name": "Filter - Schema Metadata",
                "type": "Filter",
                "dependsOn": [
                    {
                        "activity": "Get Metadata",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    },
                    {
                        "activity": "Runtime Variables",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    },
                    {
                        "activity": "Create Log Tables If Not Exists",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    }
                ],
                "userProperties": [],
                "typeProperties": {
                    "items": {
                        "value": "@activity('Get Metadata').output.value",
                        "type": "Expression"
                    },
                    "condition": {
                        "value": "@equals(item().SchemaFlag, 1)",
                        "type": "Expression"
                    }
                }
            },
            {
                "name": "Filter - Table Metadata",
                "type": "Filter",
                "dependsOn": [
                    {
                        "activity": "Get Metadata",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    }
                ],
                "userProperties": [],
                "typeProperties": {
                    "items": {
                        "value": "@activity('Get Metadata').output.value",
                        "type": "Expression"
                    },
                    "condition": {
                        "value": "@equals(item().SchemaFlag, 0)",
                        "type": "Expression"
                    }
                }
            },
            {
                "name": "Create Log Tables If Not Exists",
                "type": "Lookup",
                "dependsOn": [],
                "policy": {
                    "timeout": "7.00:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "source": {
                        "type": "SqlDWSource",
                        "sqlReaderQuery": "IF NOT EXISTS (SELECT 1 FROM sys.schemas WHERE [name] = 'logging')\n    EXEC ('CREATE SCHEMA [logging]')\n;\n\nIF OBJECT_ID('logging.AutoIngestion', 'U') IS NULL\nCREATE TABLE logging.AutoIngestion \n(\n\tId INT IDENTITY(1,1) NOT NULL\n\t,PipelineRunId VARCHAR(50) NOT NULL\n\t,PipelineName VARCHAR(100) NOT NULL\n\t,PipelineStartDate INT NOT NULL\n\t,PipelineStartDateTime DATETIME2(0) NOT NULL\n\t,StorageAccountNameMetadata NVARCHAR(1000) NULL\n\t,SchemaNameStaging NVARCHAR(100) NULL\n    ,TableNameStaging NVARCHAR(100) NULL\n\t,FolderPathFull NVARCHAR(1000) NULL\n\t,SchemaNameTarget NVARCHAR(100) NULL\n    ,TableNameTarget NVARCHAR(100) NULL\n    ,TableDistributionTarget NVARCHAR(100) NULL\n\t,TableIndexTarget NVARCHAR(100) NULL\n\t,ActivityType VARCHAR(50) NOT NULL --ex 'Create Staging Table', 'Copy Into', 'Build Statistics'\n\t,SqlCommand NVARCHAR(MAX) NOT NULL\n    ,RowInsertDateTime DATETIME2(0) NOT NULL\n)\nWITH (DISTRIBUTION = ROUND_ROBIN, CLUSTERED INDEX(PipelineStartDateTime, PipelineRunId)\n)\n;\n\nIF OBJECT_ID('logging.DataProfile', 'U') IS NULL\nCREATE TABLE logging.DataProfile\n(\n\tId INT IDENTITY(1,1) NOT NULL\n\t,PipelineRunId NVARCHAR(50) NOT NULL\n\t,PipelineStartDate INT NOT NULL\n\t,PipelineStartDateTime DATETIME2(0) NOT NULL\n    ,SchemaName NVARCHAR(100) NOT NULL\n    ,TableName NVARCHAR(100) NOT NULL\n\t,ColumnName NVARCHAR(100) NOT NULL\n\t,DataTypeName NVARCHAR(100) NOT NULL\n\t,DataTypeFull NVARCHAR(100) NOT NULL\n\t,CharacterLength INT NULL\n\t,PrecisionValue INT NULL\t\n\t,ScaleValue INT NULL\t\n\t,UniqueValueCount BIGINT NOT NULL\n\t,NullCount BIGINT NOT NULL\n\t,MinValue NVARCHAR(MAX)\n\t,MaxValue NVARCHAR(MAX)\n\t,MinLength INT\n\t,MaxLength INT\n\t,DataAverage NUMERIC(30,2)\n\t,DataStdevp FLOAT\n\t,TableRowCount BIGINT NOT NULL\n\t,TableDataSpaceGB NUMERIC(20,2) NOT NULL\n\t,WeightedScore NUMERIC(30,4)\n\t,SqlCommand NVARCHAR(MAX) NOT NULL\n    ,RowInsertDateTime DATETIME2(0) NOT NULL\n)\nWITH (DISTRIBUTION = ROUND_ROBIN, CLUSTERED INDEX(PipelineStartDateTime, PipelineRunId)\n)\n;\nSELECT 1 AS a",
                        "queryTimeout": "24:00:00",
                        "partitionOption": "None"
                    },
                    "dataset": {
                        "referenceName": "DS_Synapse_Managed_Identity",
                        "type": "DatasetReference",
                        "parameters": {
                            "ServerName": {
                                "value": "@concat(pipeline().DataFactory, '.sql.azuresynapse.net')",
                                "type": "Expression"
                            },
                            "DatabaseName": {
                                "value": "@variables('DatabaseName')",
                                "type": "Expression"
                            }
                        }
                    },
                    "firstRowOnly": false
                }
            }
        ],
        "parameters": {
            "StorageAccountNameMetadata": {
                "type": "string",
                "defaultValue": "https://REPLACE_DATALAKE_NAME.dfs.core.windows.net/data/Parquet_Auto_Ingestion_Metadata.csv"
            }
        },
        "variables": {
            "PipelineValues": {
                "type": "Array"
            },
            "SqlCommandCreateStagingTable": {
                "type": "String",
                "defaultValue": "IF OBJECT_ID('tempdb..#tables') IS NOT NULL \tDROP TABLE #tables;  CREATE TABLE #tables ( \tSchemaName NVARCHAR(100) \t,TableName NVARCHAR(100) \t,FolderPath NVARCHAR(1000) \t);  INSERT INTO #tables VALUES ( \t'{SchemaNameStaging}' \t,'{TableNameStaging}' \t,'{FolderPathFull}' \t)  IF OBJECT_ID('tempdb..#CreateViewsDDL') IS NOT NULL \tDROP TABLE #CreateViewsDDL;  CREATE TABLE #CreateViewsDDL ( \tSchemaName NVARCHAR(100) \t,ViewName NVARCHAR(100) \t,ViewDDL NVARCHAR(MAX) \t);  DECLARE @cnt INT = 1 DECLARE @sqlCreateView NVARCHAR(MAX) DECLARE @SchemaName NVARCHAR(100) DECLARE @TableName NVARCHAR(100) DECLARE @FolderPath NVARCHAR(1000)  SELECT @SchemaName = SchemaName \t,@TableName = TableName \t,@FolderPath = FolderPath \t,@sqlCreateView = CONCAT ( \t\t'sp_describe_first_result_set @tsql=N''SELECT * FROM OPENROWSET(BULK ''''' \t\t,FolderPath \t\t,''''' , FORMAT=''''PARQUET'''') AS r''' \t\t) FROM #tables;  IF OBJECT_ID('tempdb..#InformationSchemaTempTable', 'U') IS NOT NULL \tDROP TABLE #InformationSchemaTempTable;  CREATE TABLE #InformationSchemaTempTable ( \tis_hidden BIT NOT NULL \t,column_ordinal INT NOT NULL \t,name SYSNAME NULL \t,is_nullable BIT NOT NULL \t,system_type_id INT NOT NULL \t,system_type_name NVARCHAR(256) NULL \t,max_length SMALLINT NOT NULL \t,precision TINYINT NOT NULL \t,scale TINYINT NOT NULL \t,collation_name SYSNAME NULL \t,user_type_id INT NULL \t,user_type_database SYSNAME NULL \t,user_type_schema SYSNAME NULL \t,user_type_name SYSNAME NULL \t,assembly_qualified_type_name NVARCHAR(4000) \t,xml_collection_id INT NULL \t,xml_collection_database SYSNAME NULL \t,xml_collection_schema SYSNAME NULL \t,xml_collection_name SYSNAME NULL \t,is_xml_document BIT NOT NULL \t,is_case_sensitive BIT NOT NULL \t,is_fixed_length_clr_type BIT NOT NULL \t,source_server SYSNAME NULL \t,source_database SYSNAME NULL \t,source_schema SYSNAME NULL \t,source_table SYSNAME NULL \t,source_column SYSNAME NULL \t,is_identity_column BIT NULL \t,is_part_of_unique_key BIT NULL \t,is_updateable BIT NULL \t,is_computed_column BIT NULL \t,is_sparse_column_set BIT NULL \t,ordinal_in_order_by_list SMALLINT NULL \t,order_by_list_length SMALLINT NULL \t,order_by_is_descending SMALLINT NULL \t,tds_type_id INT NOT NULL \t,tds_length INT NOT NULL \t,tds_collation_id INT NULL \t,tds_collation_sort_id TINYINT NULL \t);  INSERT INTO #InformationSchemaTempTable EXEC (@sqlCreateView) /*SELECT * FROM #InformationSchemaTempTable*/  DECLARE @GetMaxValueStatement NVARCHAR(MAX) DECLARE @GetColumnList NVARCHAR(MAX)  SELECT @GetMaxValueStatement = CONVERT(NVARCHAR(MAX), CONCAT ( \t\t\t'SELECT ' \t\t\t,STRING_AGG(ColumnMaxLength, ',') \t\t\t,' FROM OPENROWSET(BULK ''' \t\t\t,@FolderPath \t\t\t,''' , FORMAT=''PARQUET'') WITH (' \t\t\t,STRING_AGG(CONVERT(NVARCHAR(MAX), ColumnDatatypeWithMax), ',') \t\t\t,') AS r' \t\t\t)) \t,@GetColumnList = STRING_AGG(QUOTENAME([name]), ',') FROM ( \tSELECT CASE  \t\t\tWHEN system_type_name LIKE ('%char%') \t\t\t\tOR system_type_name = 'varbinary(8000)' \t\t\t\tTHEN CONCAT ( \t\t\t\t\t\t'CONVERT(BIGINT, COALESCE(NULLIF(MAX(DATALENGTH(' \t\t\t\t\t\t,QUOTENAME([name]) \t\t\t\t\t\t,')), 0), 1)) AS ' \t\t\t\t\t\t,QUOTENAME([name]) \t\t\t\t\t\t) \t\t\tELSE CONCAT ( \t\t\t\t\t'COALESCE(CONVERT(BIGINT, SUM(0)), 0) AS ' \t\t\t\t\t,QUOTENAME([name]) \t\t\t\t\t) \t\t\tEND AS ColumnMaxLength \t\t,CASE  \t\t\tWHEN system_type_name LIKE ('%char%') \t\t\t\tTHEN CONCAT ( \t\t\t\t\t\tQUOTENAME([name]) \t\t\t\t\t\t,' ' \t\t\t\t\t\t,REPLACE(system_type_name, '8000', 'MAX') \t\t\t\t\t\t,' COLLATE Latin1_General_100_BIN2_UTF8' \t\t\t\t\t\t) \t\t\tWHEN system_type_name = 'varbinary(8000)' \t\t\t\tTHEN CONCAT ( \t\t\t\t\t\tQUOTENAME([name]) \t\t\t\t\t\t,' ' \t\t\t\t\t\t,REPLACE(system_type_name, '8000', 'MAX') \t\t\t\t\t\t) \t\t\tELSE CONCAT ( \t\t\t\t\tQUOTENAME([name]) \t\t\t\t\t,' ' \t\t\t\t\t,system_type_name \t\t\t\t\t) \t\t\tEND AS ColumnDatatypeWithMax \t\t,[name] \tFROM #InformationSchemaTempTable \t) AS a /*SELECT @GetMaxValueStatement*/ /*SELECT @GetColumnList*/  DECLARE @sqlUnpivot NVARCHAR(MAX)  SET @sqlUnpivot = CONCAT ( \t\t'SELECT ''' \t\t,@TableName \t\t,''' AS TABLE_NAME, unpvt.col AS COLUMN_NAME, CASE WHEN unpvt.datatype > 8000 THEN ''MAX'' ELSE CONVERT(NVARCHAR(100), unpvt.datatype) END AS DATATYPE_MAX FROM  ( ' \t\t,@GetMaxValueStatement \t\t,' ) AS a ' \t\t,CHAR(13) \t\t,' UNPIVOT ( datatype FOR col IN  ( ' \t\t,@GetColumnList \t\t,') ) AS unpvt' \t\t)  DROP TABLE  IF EXISTS #tmpBus; \tCREATE TABLE #tmpBus ( \t\tTABLE_CLEAN NVARCHAR(1000) \t\t,COLUMN_NAME NVARCHAR(1000) \t\t,DATATYPE_MAX NVARCHAR(1000) \t\t);  INSERT INTO #tmpBus EXEC (@sqlUnpivot)  DECLARE @createFinalView NVARCHAR(MAX) DECLARE @openrowsetValue NVARCHAR(MAX)  SELECT @createFinalView = CONCAT ( \t\t'CREATE TABLE ' \t\t,QUOTENAME(@SchemaName) \t\t,'.' \t\t,QUOTENAME(@TableName) \t\t,' (' \t\t,STRING_AGG(ColumnFullDefinition, ',') \t\t,') WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP)' \t\t) \t,@openrowsetValue = CONCAT ( \t\t'FROM OPENROWSET(BULK ''''' \t\t,@FolderPath \t\t,''''', FORMAT=''''PARQUET'''') WITH (' \t\t,STRING_AGG(CONVERT(NVARCHAR(MAX), ColumnFullDefinition), ',') \t\t) FROM ( \tSELECT @TableName AS table_name \t\t,c.[name] \t\t,UPPER(TYPE_NAME(c.system_type_id)) AS DataType \t\t,CONCAT ( \t\t\tQUOTENAME(c.[name]) \t\t\t,' ' \t\t\t,CASE  \t\t\t\tWHEN TYPE_NAME(c.system_type_id) IN ( \t\t\t\t\t\t'int' \t\t\t\t\t\t,'bigint' \t\t\t\t\t\t,'smallint' \t\t\t\t\t\t,'tinyint' \t\t\t\t\t\t,'bit' \t\t\t\t\t\t,'decimal' \t\t\t\t\t\t,'numeric' \t\t\t\t\t\t,'float' \t\t\t\t\t\t,'real' \t\t\t\t\t\t,'datetime2' \t\t\t\t\t\t,'date' \t\t\t\t\t\t) \t\t\t\t\tTHEN UPPER(c.system_type_name) \t\t\t\tELSE CONCAT ( \t\t\t\t\t\tUPPER(TYPE_NAME(c.system_type_id)) \t\t\t\t\t\t,'(' \t\t\t\t\t\t,a.DATATYPE_MAX \t\t\t\t\t\t,') ' \t\t\t\t\t\t) \t\t\t\tEND \t\t\t) AS ColumnFullDefinition \tFROM #InformationSchemaTempTable AS c \tJOIN #tmpBus AS a ON a.COLUMN_NAME = c.[name] \tORDER BY column_ordinal OFFSET 0 ROWS \t) AS a /*SELECT @createFinalView*/ /*INSERT INTO #CreateViewsDDL*/  SELECT @SchemaName AS SchemaName \t,@TableName AS TableName \t,CONCAT ( \t\t'IF OBJECT_ID(''' \t\t,QUOTENAME(@SchemaName) \t\t,'.' \t\t,QUOTENAME(@TableName) \t\t,''', ''U'') IS NOT NULL DROP TABLE ' \t\t,QUOTENAME(@SchemaName) \t\t,'.' \t\t,QUOTENAME(@TableName) \t\t,'; ' \t\t,@createFinalView \t\t,';' \t\t) AS CreateTableDDL;"
            },
            "SqlCommandStats": {
                "type": "String",
                "defaultValue": "EXECUTE AS user = 'Userstaticrc10'  DECLARE @sql NVARCHAR(MAX)  SELECT @sql = STRING_AGG(CONVERT(NVARCHAR(MAX), CONCAT (                 DropStatDDL                 , create_stat_ddl                 )), ';') FROM (     SELECT DISTINCT t.[name] AS [table_name]         , s.[name] AS [table_schema_name]         , c.[name] AS [column_name]         , c.[column_id] AS [column_id]         , t.[object_id] AS [object_id]         , CASE              WHEN l.[object_id] IS NULL                 THEN 0             ELSE 1             END AS StatExistsFlag         , st.name AS StatName         , CAST('CREATE STATISTICS ' + QUOTENAME('stat_' + s.[name] + '_' + t.[name] + '_' + c.[name]) + ' ON ' + QUOTENAME(s.[name]) + '.' + QUOTENAME(t.[name]) + '(' + QUOTENAME(c.[name]) + ') WITH FULLSCAN' AS VARCHAR(8000)) AS create_stat_ddl         , CASE              WHEN st.name IS NULL                 THEN ''             ELSE CONCAT (                     'DROP STATISTICS '                     , QUOTENAME(s.[name])                     , '.'                     , QUOTENAME(t.[name])                     , '.'                     , QUOTENAME(st.name)                     , ';'                     )             END AS DropStatDDL     FROM sys.[tables] AS t     JOIN sys.[schemas] AS s         ON t.[schema_id] = s.[schema_id]     JOIN sys.[columns] AS c         ON t.[object_id] = c.[object_id]     JOIN sys.types AS tp         ON c.user_type_id = tp.user_type_id     LEFT JOIN sys.[stats_columns] l         ON l.[object_id] = c.[object_id]             AND l.[column_id] = c.[column_id]             AND l.[stats_column_id] = 1     LEFT JOIN sys.stats AS st         ON st.[object_id] = t.[object_id]             AND st.stats_id = l.stats_id     LEFT JOIN sys.indexes AS i         ON i.[object_id] = t.[object_id]             AND i.index_id = st.stats_id     LEFT JOIN sys.[external_tables] AS e         ON e.[object_id] = t.[object_id]     WHERE e.[object_id] IS NULL /* not an external table */         AND i.[object_id] IS NULL         AND c.max_length < 100         AND (             (                 tp.[name] IN ('decimal', 'numeric')                 AND c.scale = 0                 )             OR tp.[name] NOT IN ('decimal', 'numeric', 'float')             )         AND s.[name] = '{SchemaNameTarget}'         AND t.[name] = '{TableNameTarget}'     ) AS a  EXEC (@sql);"
            },
            "GetResourceClass": {
                "type": "String",
                "defaultValue": "DECLARE @DWU VARCHAR(8) \t,@SCHEMA_NAME VARCHAR(128) = '{SchemaNameStaging}' \t,@TABLE_NAME VARCHAR(128) = '{TableNameStaging}' \t,@Optmial_Resource_Class VARCHAR(100) \t,@Set_Resource_Class VARCHAR(1000)  SELECT @DWU = 'DW' + CAST(CASE  \t\t\tWHEN Mem > 4 \t\t\t\tTHEN Nodes * 500 \t\t\tELSE Mem * 100 \t\t\tEND AS VARCHAR(10)) + 'c' FROM ( \tSELECT Nodes = count(DISTINCT n.pdw_node_id) /*,Mem=max(i.committed_target_kb/1000/1000/60)*/ \t\t,Mem = CAST(max(i.committed_target_kb / 1000.0 / 1000 / 60) AS DECIMAL(10, 0)) \tFROM sys.dm_pdw_nodes n \tCROSS APPLY sys.dm_pdw_nodes_os_sys_info i \tWHERE type = 'COMPUTE' \t) AS A  IF OBJECT_ID('tempdb..#ref') IS NOT NULL BEGIN \tDROP TABLE #ref; END;  CREATE TABLE #ref \tWITH (DISTRIBUTION = ROUND_ROBIN) AS WITH alloc AS ( \t\tSELECT 'DW100c' AS DWU \t\t\t,4 AS max_queries \t\t\t,4 AS max_slots \t\t\t,1 AS slots_used_smallrc \t\t\t,1 AS slots_used_mediumrc \t\t\t,2 AS slots_used_largerc \t\t\t,4 AS slots_used_xlargerc \t\t\t,1 AS slots_used_staticrc10 \t\t\t,2 AS slots_used_staticrc20 \t\t\t,4 AS slots_used_staticrc30 \t\t\t,4 AS slots_used_staticrc40 \t\t\t,4 AS slots_used_staticrc50 \t\t\t,4 AS slots_used_staticrc60 \t\t\t,4 AS slots_used_staticrc70 \t\t\t,4 AS slots_used_staticrc80 \t\t \t\tUNION ALL \t\t \t\tSELECT 'DW200c' \t\t\t,8 \t\t\t,8 \t\t\t,1 \t\t\t,2 \t\t\t,4 \t\t\t,8 \t\t\t,1 \t\t\t,2 \t\t\t,4 \t\t\t,8 \t\t\t,8 \t\t\t,8 \t\t\t,8 \t\t\t,8 \t\t \t\tUNION ALL \t\t \t\tSELECT 'DW300c' \t\t\t,12 \t\t\t,12 \t\t\t,1 \t\t\t,2 \t\t\t,4 \t\t\t,8 \t\t\t,1 \t\t\t,2 \t\t\t,4 \t\t\t,8 \t\t\t,8 \t\t\t,8 \t\t\t,8 \t\t\t,8 \t\t \t\tUNION ALL \t\t \t\tSELECT 'DW400c' \t\t\t,16 \t\t\t,16 \t\t\t,1 \t\t\t,4 \t\t\t,8 \t\t\t,16 \t\t\t,1 \t\t\t,2 \t\t\t,4 \t\t\t,8 \t\t\t,16 \t\t\t,16 \t\t\t,16 \t\t\t,16 \t\t \t\tUNION ALL \t\t \t\tSELECT 'DW500c' \t\t\t,20 \t\t\t,20 \t\t\t,1 \t\t\t,4 \t\t\t,8 \t\t\t,16 \t\t\t,1 \t\t\t,2 \t\t\t,4 \t\t\t,8 \t\t\t,16 \t\t\t,16 \t\t\t,16 \t\t\t,16 \t\t \t\tUNION ALL \t\t \t\tSELECT 'DW1000c' \t\t\t,32 \t\t\t,40 \t\t\t,1 \t\t\t,4 \t\t\t,8 \t\t\t,28 \t\t\t,1 \t\t\t,2 \t\t\t,4 \t\t\t,8 \t\t\t,16 \t\t\t,32 \t\t\t,32 \t\t\t,32 \t\t \t\tUNION ALL \t\t \t\tSELECT 'DW1500c' \t\t\t,32 \t\t\t,60 \t\t\t,1 \t\t\t,6 \t\t\t,13 \t\t\t,42 \t\t\t,1 \t\t\t,2 \t\t\t,4 \t\t\t,8 \t\t\t,16 \t\t\t,32 \t\t\t,32 \t\t\t,32 \t\t \t\tUNION ALL \t\t \t\tSELECT 'DW2000c' \t\t\t,48 \t\t\t,80 \t\t\t,2 \t\t\t,8 \t\t\t,17 \t\t\t,56 \t\t\t,1 \t\t\t,2 \t\t\t,4 \t\t\t,8 \t\t\t,16 \t\t\t,32 \t\t\t,64 \t\t\t,64 \t\t \t\tUNION ALL \t\t \t\tSELECT 'DW2500c' \t\t\t,48 \t\t\t,100 \t\t\t,3 \t\t\t,10 \t\t\t,22 \t\t\t,70 \t\t\t,1 \t\t\t,2 \t\t\t,4 \t\t\t,8 \t\t\t,16 \t\t\t,32 \t\t\t,64 \t\t\t,64 \t\t \t\tUNION ALL \t\t \t\tSELECT 'DW3000c' \t\t\t,64 \t\t\t,120 \t\t\t,3 \t\t\t,12 \t\t\t,26 \t\t\t,84 \t\t\t,1 \t\t\t,2 \t\t\t,4 \t\t\t,8 \t\t\t,16 \t\t\t,32 \t\t\t,64 \t\t\t,64 \t\t \t\tUNION ALL \t\t \t\tSELECT 'DW5000c' \t\t\t,64 \t\t\t,200 \t\t\t,6 \t\t\t,20 \t\t\t,44 \t\t\t,140 \t\t\t,1 \t\t\t,2 \t\t\t,4 \t\t\t,8 \t\t\t,16 \t\t\t,32 \t\t\t,64 \t\t\t,128 \t\t \t\tUNION ALL \t\t \t\tSELECT 'DW6000c' \t\t\t,128 \t\t\t,240 \t\t\t,7 \t\t\t,24 \t\t\t,52 \t\t\t,168 \t\t\t,1 \t\t\t,2 \t\t\t,4 \t\t\t,8 \t\t\t,16 \t\t\t,32 \t\t\t,64 \t\t\t,128 \t\t \t\tUNION ALL \t\t \t\tSELECT 'DW7500c' \t\t\t,128 \t\t\t,300 \t\t\t,9 \t\t\t,30 \t\t\t,66 \t\t\t,210 \t\t\t,1 \t\t\t,2 \t\t\t,4 \t\t\t,8 \t\t\t,16 \t\t\t,32 \t\t\t,64 \t\t\t,128 \t\t \t\tUNION ALL \t\t \t\tSELECT 'DW10000c' \t\t\t,128 \t\t\t,400 \t\t\t,12 \t\t\t,40 \t\t\t,88 \t\t\t,280 \t\t\t,1 \t\t\t,2 \t\t\t,4 \t\t\t,8 \t\t\t,16 \t\t\t,32 \t\t\t,64 \t\t\t,128 \t\t \t\tUNION ALL \t\t \t\tSELECT 'DW15000c' \t\t\t,128 \t\t\t,600 \t\t\t,18 \t\t\t,60 \t\t\t,132 \t\t\t,420 \t\t\t,1 \t\t\t,2 \t\t\t,4 \t\t\t,8 \t\t\t,16 \t\t\t,32 \t\t\t,64 \t\t\t,128 \t\t \t\tUNION ALL \t\t \t\tSELECT 'DW30000c' \t\t\t,128 \t\t\t,1200 \t\t\t,36 \t\t\t,120 \t\t\t,264 \t\t\t,840 \t\t\t,1 \t\t\t,2 \t\t\t,4 \t\t\t,8 \t\t\t,16 \t\t\t,32 \t\t\t,64 \t\t\t,128 \t\t) \t,map AS ( \t\tSELECT CONVERT(VARCHAR(20), 'SloDWGroupSmall') AS wg_name \t\t\t,slots_used_smallrc AS slots_used \t\tFROM alloc \t\tWHERE DWU = @DWU \t\t \t\tUNION ALL \t\t \t\tSELECT CONVERT(VARCHAR(20), 'SloDWGroupMedium') AS wg_name \t\t\t,slots_used_mediumrc AS slots_used \t\tFROM alloc \t\tWHERE DWU = @DWU \t\t \t\tUNION ALL \t\t \t\tSELECT CONVERT(VARCHAR(20), 'SloDWGroupLarge') AS wg_name \t\t\t,slots_used_largerc AS slots_used \t\tFROM alloc \t\tWHERE DWU = @DWU \t\t \t\tUNION ALL \t\t \t\tSELECT CONVERT(VARCHAR(20), 'SloDWGroupXLarge') AS wg_name \t\t\t,slots_used_xlargerc AS slots_used \t\tFROM alloc \t\tWHERE DWU = @DWU \t\t \t\tUNION ALL \t\t \t\tSELECT 'SloDWGroupC00' \t\t\t,1 \t\t \t\tUNION ALL \t\t \t\tSELECT 'SloDWGroupC01' \t\t\t,2 \t\t \t\tUNION ALL \t\t \t\tSELECT 'SloDWGroupC02' \t\t\t,4 \t\t \t\tUNION ALL \t\t \t\tSELECT 'SloDWGroupC03' \t\t\t,8 \t\t \t\tUNION ALL \t\t \t\tSELECT 'SloDWGroupC04' \t\t\t,16 \t\t \t\tUNION ALL \t\t \t\tSELECT 'SloDWGroupC05' \t\t\t,32 \t\t \t\tUNION ALL \t\t \t\tSELECT 'SloDWGroupC06' \t\t\t,64 \t\t \t\tUNION ALL \t\t \t\tSELECT 'SloDWGroupC07' \t\t\t,128 \t\t) \t,ref AS ( \t\tSELECT a1.* \t\t\t,m1.wg_name AS wg_name_smallrc \t\t\t,m1.slots_used * 250 AS tgt_mem_grant_MB_smallrc \t\t\t,m2.wg_name AS wg_name_mediumrc \t\t\t,m2.slots_used * 250 AS tgt_mem_grant_MB_mediumrc \t\t\t,m3.wg_name AS wg_name_largerc \t\t\t,m3.slots_used * 250 AS tgt_mem_grant_MB_largerc \t\t\t,m4.wg_name AS wg_name_xlargerc \t\t\t,m4.slots_used * 250 AS tgt_mem_grant_MB_xlargerc \t\t\t,m5.wg_name AS wg_name_staticrc10 \t\t\t,m5.slots_used * 250 AS tgt_mem_grant_MB_staticrc10 \t\t\t,m6.wg_name AS wg_name_staticrc20 \t\t\t,m6.slots_used * 250 AS tgt_mem_grant_MB_staticrc20 \t\t\t,m7.wg_name AS wg_name_staticrc30 \t\t\t,m7.slots_used * 250 AS tgt_mem_grant_MB_staticrc30 \t\t\t,m8.wg_name AS wg_name_staticrc40 \t\t\t,m8.slots_used * 250 AS tgt_mem_grant_MB_staticrc40 \t\t\t,m9.wg_name AS wg_name_staticrc50 \t\t\t,m9.slots_used * 250 AS tgt_mem_grant_MB_staticrc50 \t\t\t,m10.wg_name AS wg_name_staticrc60 \t\t\t,m10.slots_used * 250 AS tgt_mem_grant_MB_staticrc60 \t\t\t,m11.wg_name AS wg_name_staticrc70 \t\t\t,m11.slots_used * 250 AS tgt_mem_grant_MB_staticrc70 \t\t\t,m12.wg_name AS wg_name_staticrc80 \t\t\t,m12.slots_used * 250 AS tgt_mem_grant_MB_staticrc80 \t\tFROM alloc a1 \t\tJOIN map m1 ON a1.slots_used_smallrc = m1.slots_used \t\t\tAND m1.wg_name = 'SloDWGroupSmall' \t\tJOIN map m2 ON a1.slots_used_mediumrc = m2.slots_used \t\t\tAND m2.wg_name = 'SloDWGroupMedium' \t\tJOIN map m3 ON a1.slots_used_largerc = m3.slots_used \t\t\tAND m3.wg_name = 'SloDWGroupLarge' \t\tJOIN map m4 ON a1.slots_used_xlargerc = m4.slots_used \t\t\tAND m4.wg_name = 'SloDWGroupXLarge' \t\tJOIN map m5 ON a1.slots_used_staticrc10 = m5.slots_used \t\t\tAND m5.wg_name NOT IN ( \t\t\t\t'SloDWGroupSmall' \t\t\t\t,'SloDWGroupMedium' \t\t\t\t,'SloDWGroupLarge' \t\t\t\t,'SloDWGroupXLarge' \t\t\t\t) \t\tJOIN map m6 ON a1.slots_used_staticrc20 = m6.slots_used \t\t\tAND m6.wg_name NOT IN ( \t\t\t\t'SloDWGroupSmall' \t\t\t\t,'SloDWGroupMedium' \t\t\t\t,'SloDWGroupLarge' \t\t\t\t,'SloDWGroupXLarge' \t\t\t\t) \t\tJOIN map m7 ON a1.slots_used_staticrc30 = m7.slots_used \t\t\tAND m7.wg_name NOT IN ( \t\t\t\t'SloDWGroupSmall' \t\t\t\t,'SloDWGroupMedium' \t\t\t\t,'SloDWGroupLarge' \t\t\t\t,'SloDWGroupXLarge' \t\t\t\t) \t\tJOIN map m8 ON a1.slots_used_staticrc40 = m8.slots_used \t\t\tAND m8.wg_name NOT IN ( \t\t\t\t'SloDWGroupSmall' \t\t\t\t,'SloDWGroupMedium' \t\t\t\t,'SloDWGroupLarge' \t\t\t\t,'SloDWGroupXLarge' \t\t\t\t) \t\tJOIN map m9 ON a1.slots_used_staticrc50 = m9.slots_used \t\t\tAND m9.wg_name NOT IN ( \t\t\t\t'SloDWGroupSmall' \t\t\t\t,'SloDWGroupMedium' \t\t\t\t,'SloDWGroupLarge' \t\t\t\t,'SloDWGroupXLarge' \t\t\t\t) \t\tJOIN map m10 ON a1.slots_used_staticrc60 = m10.slots_used \t\t\tAND m10.wg_name NOT IN ( \t\t\t\t'SloDWGroupSmall' \t\t\t\t,'SloDWGroupMedium' \t\t\t\t,'SloDWGroupLarge' \t\t\t\t,'SloDWGroupXLarge' \t\t\t\t) \t\tJOIN map m11 ON a1.slots_used_staticrc70 = m11.slots_used \t\t\tAND m11.wg_name NOT IN ( \t\t\t\t'SloDWGroupSmall' \t\t\t\t,'SloDWGroupMedium' \t\t\t\t,'SloDWGroupLarge' \t\t\t\t,'SloDWGroupXLarge' \t\t\t\t) \t\tJOIN map m12 ON a1.slots_used_staticrc80 = m12.slots_used \t\t\tAND m12.wg_name NOT IN ( \t\t\t\t'SloDWGroupSmall' \t\t\t\t,'SloDWGroupMedium' \t\t\t\t,'SloDWGroupLarge' \t\t\t\t,'SloDWGroupXLarge' \t\t\t\t) \t\tWHERE a1.DWU = @DWU \t\t)  SELECT DWU \t,max_queries \t,max_slots \t,slots_used \t,wg_name \t,tgt_mem_grant_MB \t,up1 AS rc \t,( \t\tROW_NUMBER() OVER ( \t\t\tPARTITION BY DWU ORDER BY DWU \t\t\t) \t\t) AS rc_id FROM ( \tSELECT DWU \t\t,max_queries \t\t,max_slots \t\t,slots_used \t\t,wg_name \t\t,tgt_mem_grant_MB \t\t,REVERSE(SUBSTRING(REVERSE(wg_names), 1, CHARINDEX('_', REVERSE(wg_names), 1) - 1)) AS up1 \t\t,REVERSE(SUBSTRING(REVERSE(tgt_mem_grant_MBs), 1, CHARINDEX('_', REVERSE(tgt_mem_grant_MBs), 1) - 1)) AS up2 \t\t,REVERSE(SUBSTRING(REVERSE(slots_used_all), 1, CHARINDEX('_', REVERSE(slots_used_all), 1) - 1)) AS up3 \tFROM ref AS r1 \tUNPIVOT(wg_name FOR wg_names IN ( \t\t\t\twg_name_smallrc \t\t\t\t,wg_name_mediumrc \t\t\t\t,wg_name_largerc \t\t\t\t,wg_name_xlargerc \t\t\t\t,wg_name_staticrc10 \t\t\t\t,wg_name_staticrc20 \t\t\t\t,wg_name_staticrc30 \t\t\t\t,wg_name_staticrc40 \t\t\t\t,wg_name_staticrc50 \t\t\t\t,wg_name_staticrc60 \t\t\t\t,wg_name_staticrc70 \t\t\t\t,wg_name_staticrc80 \t\t\t\t)) AS r2 \tUNPIVOT(tgt_mem_grant_MB FOR tgt_mem_grant_MBs IN ( \t\t\t\ttgt_mem_grant_MB_smallrc \t\t\t\t,tgt_mem_grant_MB_mediumrc \t\t\t\t,tgt_mem_grant_MB_largerc \t\t\t\t,tgt_mem_grant_MB_xlargerc \t\t\t\t,tgt_mem_grant_MB_staticrc10 \t\t\t\t,tgt_mem_grant_MB_staticrc20 \t\t\t\t,tgt_mem_grant_MB_staticrc30 \t\t\t\t,tgt_mem_grant_MB_staticrc40 \t\t\t\t,tgt_mem_grant_MB_staticrc50 \t\t\t\t,tgt_mem_grant_MB_staticrc60 \t\t\t\t,tgt_mem_grant_MB_staticrc70 \t\t\t\t,tgt_mem_grant_MB_staticrc80 \t\t\t\t)) AS r3 \tUNPIVOT(slots_used FOR slots_used_all IN ( \t\t\t\tslots_used_smallrc \t\t\t\t,slots_used_mediumrc \t\t\t\t,slots_used_largerc \t\t\t\t,slots_used_xlargerc \t\t\t\t,slots_used_staticrc10 \t\t\t\t,slots_used_staticrc20 \t\t\t\t,slots_used_staticrc30 \t\t\t\t,slots_used_staticrc40 \t\t\t\t,slots_used_staticrc50 \t\t\t\t,slots_used_staticrc60 \t\t\t\t,slots_used_staticrc70 \t\t\t\t,slots_used_staticrc80 \t\t\t\t)) AS r4 \t) a WHERE up1 = up2 \tAND up1 = up3; WITH dmv AS ( \tSELECT rp.name AS rp_name \t\t,rp.max_memory_kb * 1.0 / 1048576 AS rp_max_mem_GB \t\t,(rp.max_memory_kb * 1.0 / 1024) * (request_max_memory_grant_percent / 100) AS max_memory_grant_MB \t\t,(rp.max_memory_kb * 1.0 / 1048576) * (request_max_memory_grant_percent / 100) AS max_memory_grant_GB \t\t,wg.name AS wg_name \t\t,wg.importance AS importance \t\t,wg.request_max_memory_grant_percent AS request_max_memory_grant_percent \tFROM sys.dm_pdw_nodes_resource_governor_workload_groups wg \tJOIN sys.dm_pdw_nodes_resource_governor_resource_pools rp ON wg.pdw_node_id = rp.pdw_node_id \t\tAND wg.pool_id = rp.pool_id \tWHERE rp.name = 'SloDWPool' \tGROUP BY rp.name \t\t,rp.max_memory_kb \t\t,wg.name \t\t,wg.importance \t\t,wg.request_max_memory_grant_percent \t) /* Creating resource class name mapping.*/ \t,NAMES AS ( \tSELECT 'smallrc' AS resource_class \t\t,1 AS rc_id \t \tUNION ALL \t \tSELECT 'mediumrc' \t\t,2 \t \tUNION ALL \t \tSELECT 'largerc' \t\t,3 \t \tUNION ALL \t \tSELECT 'xlargerc' \t\t,4 \t \tUNION ALL \t \tSELECT 'staticrc10' \t\t,5 \t \tUNION ALL \t \tSELECT 'staticrc20' \t\t,6 \t \tUNION ALL \t \tSELECT 'staticrc30' \t\t,7 \t \tUNION ALL \t \tSELECT 'staticrc40' \t\t,8 \t \tUNION ALL \t \tSELECT 'staticrc50' \t\t,9 \t \tUNION ALL \t \tSELECT 'staticrc60' \t\t,10 \t \tUNION ALL \t \tSELECT 'staticrc70' \t\t,11 \t \tUNION ALL \t \tSELECT 'staticrc80' \t\t,12 \t) \t,base AS ( \tSELECT schema_name \t\t,table_name \t\t,SUM(column_count) AS column_count \t\t,CONVERT(BIGINT, ISNULL(SUM(short_string_column_count), 0)) AS short_string_column_count \t\t,CONVERT(BIGINT, ISNULL(SUM(long_string_column_count), 0)) AS long_string_column_count \tFROM ( \t\tSELECT sm.name AS schema_name \t\t\t,tb.name AS table_name \t\t\t,COUNT(co.column_id) AS column_count \t\t\t,CASE  \t\t\t\tWHEN co.system_type_id IN ( \t\t\t\t\t\t36 \t\t\t\t\t\t,43 \t\t\t\t\t\t,106 \t\t\t\t\t\t,108 \t\t\t\t\t\t,165 \t\t\t\t\t\t,167 \t\t\t\t\t\t,173 \t\t\t\t\t\t,175 \t\t\t\t\t\t,231 \t\t\t\t\t\t,239 \t\t\t\t\t\t) \t\t\t\t\tAND co.max_length <= 32 \t\t\t\t\tTHEN COUNT(co.column_id) \t\t\t\tEND AS short_string_column_count \t\t\t,CASE  \t\t\t\tWHEN co.system_type_id IN ( \t\t\t\t\t\t165 \t\t\t\t\t\t,167 \t\t\t\t\t\t,173 \t\t\t\t\t\t,175 \t\t\t\t\t\t,231 \t\t\t\t\t\t,239 \t\t\t\t\t\t) \t\t\t\t\tAND co.max_length > 32 \t\t\t\t\tAND co.max_length <= 8000 \t\t\t\t\tTHEN COUNT(co.column_id) \t\t\t\tEND AS long_string_column_count \t\tFROM sys.schemas AS sm \t\tJOIN sys.tables AS tb ON sm.[schema_id] = tb.[schema_id] \t\tJOIN sys.columns AS co ON tb.[object_id] = co.[object_id] \t\tWHERE tb.name = CASE  \t\t\t\tWHEN @TABLE_NAME IS NULL \t\t\t\t\tTHEN tb.name \t\t\t\tELSE @TABLE_NAME \t\t\t\tEND \t\t\tAND sm.name = CASE  \t\t\t\tWHEN @SCHEMA_NAME IS NULL \t\t\t\t\tTHEN sm.name \t\t\t\tELSE @SCHEMA_NAME \t\t\t\tEND \t\tGROUP BY sm.name \t\t\t,tb.name \t\t\t,co.system_type_id \t\t\t,co.max_length \t\t) a \tGROUP BY schema_name \t\t,table_name \t) \t,size AS ( \tSELECT schema_name \t\t,table_name \t\t,75497472 AS table_overhead \t\t,column_count * 1048576 * 8 AS column_size \t\t,short_string_column_count * 1048576 * 32 AS short_string_size \t\t,long_string_column_count * 16777216 AS long_string_size \tFROM base \t \tUNION \t \tSELECT CASE  \t\t\tWHEN COUNT(*) = 0 \t\t\t\tTHEN 'EMPTY' \t\t\tEND AS schema_name \t\t,CASE  \t\t\tWHEN COUNT(*) = 0 \t\t\t\tTHEN 'EMPTY' \t\t\tEND AS table_name \t\t,CASE  \t\t\tWHEN COUNT(*) = 0 \t\t\t\tTHEN 0 \t\t\tEND AS table_overhead \t\t,CASE  \t\t\tWHEN COUNT(*) = 0 \t\t\t\tTHEN 0 \t\t\tEND AS column_size \t\t,CASE  \t\t\tWHEN COUNT(*) = 0 \t\t\t\tTHEN 0 \t\t\tEND AS short_string_size \t\t,CASE  \t\t\tWHEN COUNT(*) = 0 \t\t\t\tTHEN 0 \t\t\tEND AS long_string_size \tFROM base \t) \t,load_multiplier AS ( \tSELECT CASE  \t\t\tWHEN FLOOR(8 * (CAST(CAST(REPLACE(REPLACE(@DWU, 'DW', ''), 'c', '') AS INT) AS FLOAT) / 6000)) > 0 /*AND CHARINDEX(@DWU, 'c') = 0*/ \t\t\t\tAND CHARINDEX('c', @DWU) = 0 \t\t\t\tTHEN FLOOR(8 * (CAST(CAST(REPLACE(REPLACE(@DWU, 'DW', ''), 'c', '') AS INT) AS FLOAT) / 6000)) \t\t\tELSE 1 \t\t\tEND AS multiplication_factor \t) SELECT @Optmial_Resource_Class = MAX(closest_rc_in_increasing_order) FROM ( \tSELECT schema_name AS schema_name \t\t,table_name AS table_name \t\t,MIN(rc.resource_class) AS closest_rc_in_increasing_order \tFROM size AS s \t\t,load_multiplier \t\t,#ref r1 \t\t,NAMES rc \tWHERE r1.rc_id = rc.rc_id \t\tAND rc.rc_id >= 5 /*only use static rc*/ \t\tAND r1.tgt_mem_grant_MB - CAST((table_overhead * 1.0 + column_size + short_string_size + long_string_size) * multiplication_factor / 1048576 AS DECIMAL(18, 2)) > 0 /*only get rc where we have enough memory*/ \t\tAND schema_name IS NOT NULL \t\tAND table_name IS NOT NULL \tGROUP BY schema_name \t\t,table_name \t) AS a;  DECLARE @TotalRowCount BIGINT;  SELECT @TotalRowCount = SUM(CONVERT(BIGINT, nps.[row_count])) FROM sys.schemas s JOIN sys.tables t ON s.[schema_id] = t.[schema_id] JOIN sys.indexes i ON t.[object_id] = i.[object_id] \tAND i.[index_id] <= 1 JOIN sys.pdw_table_distribution_properties tp ON t.[object_id] = tp.[object_id] JOIN sys.pdw_table_mappings tm ON t.[object_id] = tm.[object_id] JOIN sys.pdw_nodes_tables nt ON tm.[physical_name] = nt.[name] JOIN sys.dm_pdw_nodes pn ON nt.[pdw_node_id] = pn.[pdw_node_id] JOIN sys.pdw_distributions di ON nt.[distribution_id] = di.[distribution_id] JOIN ( \tSELECT [object_id] \t\t,[pdw_node_id] \t\t,[distribution_id] \t\t,SUM(row_count) AS row_count \tFROM ( \t\tSELECT [object_id] \t\t\t,[pdw_node_id] \t\t\t,[distribution_id] \t\t\t,MAX(row_count) AS row_count \t\tFROM sys.dm_pdw_nodes_db_partition_stats \t\tGROUP BY [object_id] \t\t\t,[pdw_node_id] \t\t\t,[distribution_id] \t\t) AS a \tGROUP BY [object_id] \t\t,[pdw_node_id] \t\t,[distribution_id] \t) AS nps ON nt.[object_id] = nps.[object_id] \tAND nt.[pdw_node_id] = nps.[pdw_node_id] \tAND nt.[distribution_id] = nps.[distribution_id] WHERE pn.[type] = 'COMPUTE' \tAND s.name = @SCHEMA_NAME \tAND t.name = @TABLE_NAME GROUP BY s.name \t,t.name;  SELECT CONCAT ( \t\t'User' \t\t,COALESCE(CASE  \t\t\t\tWHEN REPLACE(@Optmial_Resource_Class, 'staticrc', '') < 80 \t\t\t\t\tAND @TotalRowCount >= 60000000 \t\t\t\t\tTHEN CONCAT ( \t\t\t\t\t\t\t'staticrc' \t\t\t\t\t\t\t,REPLACE(@Optmial_Resource_Class, 'staticrc', '') + 10 \t\t\t\t\t\t\t) \t\t\t\tWHEN @TotalRowCount < 60000000 \t\t\t\t\tTHEN 'staticrc10' \t\t\t\tELSE @Optmial_Resource_Class \t\t\t\tEND, 'staticrc80') \t\t) AS UserName"
            },
            "CTAS": {
                "type": "String",
                "defaultValue": "EXECUTE AS USER = '{ResourceClassName}'  DECLARE @SchemaNameStaging NVARCHAR(MAX) = '{SchemaNameStaging}' \t,@TableNameStaging NVARCHAR(MAX) = '{TableNameStaging}' \t,@RowCount BIGINT \t,@TableDataSpaceGB DECIMAL(36, 2);  WITH base AS ( \tSELECT s.name AS [schema_name] \t\t,t.name AS [table_name] \t\t,QUOTENAME(s.name) + '.' + QUOTENAME(t.name) AS [two_part_name] \t\t,tp.[distribution_policy_desc] AS [distribution_policy_name] \t\t,c.[name] AS [distribution_column] \t\t,i.[type_desc] AS [index_type_desc] \t\t,[reserved_page_count] AS reserved_space_page_count \t\t,[used_data] AS data_space_page_count \t\t,([reserved_page_count] - ([used_data] + ([reserved_page_count] - [used_page_count]))) AS index_space_page_count \t\t,([reserved_page_count] - [used_page_count]) AS unused_space_page_count \t\t,nps.[row_count] AS [row_count] \tFROM sys.schemas s \tJOIN sys.tables t ON s.[schema_id] = t.[schema_id] \tJOIN sys.indexes i ON t.[object_id] = i.[object_id] \t\tAND i.[index_id] <= 1 \tJOIN sys.pdw_table_distribution_properties tp ON t.[object_id] = tp.[object_id] \tJOIN sys.pdw_table_mappings tm ON t.[object_id] = tm.[object_id] \tJOIN sys.pdw_nodes_tables nt ON tm.[physical_name] = nt.[name] \tJOIN sys.dm_pdw_nodes pn ON nt.[pdw_node_id] = pn.[pdw_node_id] \tJOIN sys.pdw_distributions di ON nt.[distribution_id] = di.[distribution_id] \tJOIN ( \t\tSELECT [object_id] \t\t\t,[pdw_node_id] \t\t\t,[distribution_id] \t\t\t,SUM(row_count) AS row_count \t\t\t,SUM([reserved_page_count]) AS [reserved_page_count] \t\t\t,SUM([used_data]) AS [used_data] \t\t\t,SUM([used_page_count]) AS [used_page_count] \t\tFROM ( \t\t\tSELECT [object_id] \t\t\t\t,[pdw_node_id] \t\t\t\t,[distribution_id] \t\t\t\t,MAX(row_count) AS row_count \t\t\t\t,SUM([reserved_page_count]) AS [reserved_page_count] \t\t\t\t,MAX([used_page_count]) AS [used_data] \t\t\t\t,SUM([used_page_count]) AS [used_page_count] \t\t\tFROM sys.dm_pdw_nodes_db_partition_stats \t\t\tGROUP BY [object_id] \t\t\t\t,[pdw_node_id] \t\t\t\t,[distribution_id] \t\t\t) AS a \t\tGROUP BY [object_id] \t\t\t,[pdw_node_id] \t\t\t,[distribution_id] \t\t) AS nps ON nt.[object_id] = nps.[object_id] \t\tAND nt.[pdw_node_id] = nps.[pdw_node_id] \t\tAND nt.[distribution_id] = nps.[distribution_id] \tLEFT JOIN ( \t\tSELECT * \t\tFROM sys.pdw_column_distribution_properties \t\tWHERE distribution_ordinal = 1 \t\t) cdp ON t.[object_id] = cdp.[object_id] \tLEFT JOIN sys.columns c ON cdp.[object_id] = c.[object_id] \t\tAND cdp.[column_id] = c.[column_id] \tWHERE pn.[type] = 'COMPUTE' \t\tAND s.name = @SchemaNameStaging \t\tAND t.name = @TableNameStaging \t) \t,size AS ( \tSELECT [schema_name] \t\t,[table_name] \t\t,[distribution_policy_name] \t\t,[distribution_column] \t\t,[index_type_desc] \t\t,[index_space_page_count] \t\t,([reserved_space_page_count] * 8.0) / 1000000 AS [reserved_space_GB] \t\t,([unused_space_page_count] * 8.0) / 1000000 AS [unused_space_GB] \t\t,([data_space_page_count] * 8.0) / 1000000 AS [data_space_GB] \t\t,([index_space_page_count] * 8.0) / 1000000 AS [index_space_GB] \t\t,[row_count] AS row_count \tFROM base \t) SELECT @RowCount = SUM(row_count) /*AS [RowCount]*/ \t,@TableDataSpaceGB = SUM(data_space_GB) /*AS TableDataSpaceGB*/ FROM size GROUP BY schema_name \t,table_name \t,distribution_policy_name \t,distribution_column \t,index_type_desc ORDER BY schema_name \t,table_name \t,SUM(reserved_space_GB) DESC;/*SELECT @RowCount, @TableDataSpaceGB*/  DECLARE @sql NVARCHAR(MAX) \t,@Distribution NVARCHAR(MAX) \t,@IndexType NVARCHAR(MAX)  SELECT @sql = sqlString FROM ( \tSELECT CONCAT ( \t\t\t'IF OBJECT_ID(''tempdb..#temp'') IS NOT NULL DROP TABLE #temp; CREATE TABLE #temp WITH (DISTRIBUTION = ROUND_ROBIN, HEAP) AS  \t\t\t\t\tSELECT \t\t\t\t\t\t\t* \t\t\t\t\t\t\t,CASE WHEN DataTypeName = ''int'' THEN 1 \t\t\t\t\t\t\t\tWHEN DataTypeName IN (''numeric'', ''decimal'') AND ScaleValue = 0 THEN 1 \t\t\t\t\t\t\t\tWHEN DataTypeName = ''bigint'' THEN 2 \t\t\t\t\t\t\t\tWHEN DataTypeName = ''smallint'' THEN 2 \t\t\t\t\t\t\t\tWHEN DataTypeName IN (''char'', ''varchar'', ''nvarchar'')  \t\t\t\t\t\t\t\t\tTHEN \t\t\t\t\t\t\t\t\t\tCASE WHEN CharacterLength <= 5 THEN 3 \t\t\t\t\t\t\t\t\t\t\t\tWHEN CharacterLength <= 10 THEN 4 \t\t\t\t\t\t\t\t\t\t\t\tWHEN CharacterLength <= 20 THEN 6 \t\t\t\t\t\t\t\t\t\t\t\tWHEN CharacterLength <= 50 THEN 8 \t\t\t\t\t\t\t\t\t\t\t\tELSE 10 \t\t\t\t\t\t\t\t\t\t\tEND \t\t\t\t\t\t\t\tELSE 10 \t\t\t\t\t\t\t\tEND \t\t\t\t\t\t\t+  \t\t\t\t\t\t\tCASE WHEN NullCountPercentage < 0.01 THEN 1 \t\t\t\t\t\t\t\tWHEN NullCountPercentage < 0.02 THEN 2 \t\t\t\t\t\t\t\tWHEN NullCountPercentage < 0.03 THEN 3 \t\t\t\t\t\t\t\tWHEN NullCountPercentage < 0.04 THEN 4 \t\t\t\t\t\t\t\tWHEN NullCountPercentage < 0.05 THEN 5 \t\t\t\t\t\t\t\tWHEN NullCountPercentage < 0.06 THEN 6 \t\t\t\t\t\t\t\tWHEN NullCountPercentage < 0.07 THEN 7 \t\t\t\t\t\t\t\tWHEN NullCountPercentage < 0.08 THEN 8 \t\t\t\t\t\t\t\tWHEN NullCountPercentage < 0.09 THEN 9 \t\t\t\t\t\t\t\tELSE 10 \t\t\t\t\t\t\t\tEND \t\t\t\t\t\t\t+  \t\t\t\t\t\t\tCASE WHEN UniqueValueCount > 60 AND UniqueValueCountPercentage > 0.000001 THEN 1 ELSE 3\t\t\t\t\t\t\tEND + RANK() OVER (ORDER BY NullCountPercentage ASC, CASE WHEN TableRowCount > 60000000 AND UniqueValueCount >= 600 THEN -1*UniqueValueCountPercentage ELSE UniqueValueCountPercentage END DESC, UniqueValueCount DESC, ABS(LEN(''' \t\t\t,@TableNameStaging \t\t\t,''') - LEN(ColName)))/10.0 \t\t\t\t\t\t\tAS WeightedScore \t\t\t\t\t\tFROM \t\t\t\t\t\t( \t\t\t\t\t\t\tSELECT\t* \t\t\t\t\t\t\t\t\t,NullCount/(NULLIF(TableRowCount, 0)*1.0) AS NullCountPercentage \t\t\t\t\t\t\t\t\t,UniqueValueCount/(NULLIF(TableRowCount, 0)*1.0) AS UniqueValueCountPercentage  \t\t\t\t\t\t\tFROM (' \t\t\t,STRING_AGG(CONVERT(NVARCHAR(MAX), CONCAT ( \t\t\t\t\t\t'SELECT ''' \t\t\t\t\t\t,COLUMN_NAME \t\t\t\t\t\t,''' AS ColName, ''' \t\t\t\t\t\t,DATA_TYPE \t\t\t\t\t\t,''' AS DataTypeName \t\t\t\t\t\t\t\t,CASE  \t\t\t\t\t\t\t\t\t  WHEN ''' \t\t\t\t\t\t,DATA_TYPE \t\t\t\t\t\t,''' IN (''varchar'', ''char'') THEN ''' \t\t\t\t\t\t,DATA_TYPE \t\t\t\t\t\t,''' + ''('' + CASE WHEN ' \t\t\t\t\t\t,COALESCE(CAST(CHARACTER_MAXIMUM_LENGTH AS VARCHAR(10)), 'NULL') \t\t\t\t\t\t,' = -1 THEN ''max'' ELSE CAST(' \t\t\t\t\t\t,COALESCE(CAST(CHARACTER_MAXIMUM_LENGTH AS VARCHAR(10)), 'NULL') \t\t\t\t\t\t,' AS VARCHAR(25)) END + '')''  \t\t\t\t\t\t\t\t\t  WHEN ''' \t\t\t\t\t\t,DATA_TYPE \t\t\t\t\t\t,''' IN (''nvarchar'',''nchar'') THEN ''' \t\t\t\t\t\t,DATA_TYPE \t\t\t\t\t\t,''' + ''('' + CASE WHEN ' \t\t\t\t\t\t,COALESCE(CAST(CHARACTER_MAXIMUM_LENGTH AS VARCHAR(10)), 'NULL') \t\t\t\t\t\t,' = -1 THEN ''max'' ELSE CAST(' \t\t\t\t\t\t,COALESCE(CAST(CHARACTER_MAXIMUM_LENGTH AS VARCHAR(10)), 'NULL') \t\t\t\t\t\t,' / 2 AS VARCHAR(25)) END + '')''       \t\t\t\t\t\t\t\t\t  WHEN ''' \t\t\t\t\t\t,DATA_TYPE \t\t\t\t\t\t,''' IN (''decimal'', ''numeric'') THEN ''' \t\t\t\t\t\t,DATA_TYPE \t\t\t\t\t\t,''' + ''('' + CAST(' \t\t\t\t\t\t,COALESCE(CAST(NUMERIC_PRECISION AS VARCHAR(10)), 'NULL') \t\t\t\t\t\t,' AS VARCHAR(25)) + '', '' + CAST(' \t\t\t\t\t\t,COALESCE(CAST(NUMERIC_SCALE AS VARCHAR(10)), 'NULL') \t\t\t\t\t\t,' AS VARCHAR(25)) + '')'' \t\t\t\t\t\t\t\t\t  WHEN ''' \t\t\t\t\t\t,DATA_TYPE \t\t\t\t\t\t,''' IN (''datetime2'') THEN ''' \t\t\t\t\t\t,DATA_TYPE \t\t\t\t\t\t,''' + ''('' + CAST(' \t\t\t\t\t\t,COALESCE(CAST(NUMERIC_SCALE AS VARCHAR(10)), 'NULL') \t\t\t\t\t\t,' AS VARCHAR(25)) + '')'' \t\t\t\t\t\t\t\t\t  ELSE ''' \t\t\t\t\t\t,DATA_TYPE \t\t\t\t\t\t,''' \t\t\t\t\t\t\t\t\tEND AS DataTypeFull \t\t\t\t\t\t\t\t,' \t\t\t\t\t\t,COALESCE(CAST(CHARACTER_MAXIMUM_LENGTH AS VARCHAR(10)), 'NULL') \t\t\t\t\t\t,' AS CharacterLength \t\t\t\t\t\t\t\t,' \t\t\t\t\t\t,COALESCE(CAST(NUMERIC_PRECISION AS VARCHAR(10)), 'NULL') \t\t\t\t\t\t,' AS PrecisionValue, ' \t\t\t\t\t\t,COALESCE(CAST(NUMERIC_SCALE AS VARCHAR(10)), 'NULL') \t\t\t\t\t\t,' AS ScaleValue \t\t\t\t\t\t\t\t,COUNT_BIG(DISTINCT ' \t\t\t\t\t\t,QUOTENAME(COLUMN_NAME) \t\t\t\t\t\t,') AS UniqueValueCount, COALESCE(SUM(CONVERT(BIGINT, CASE WHEN ' \t\t\t\t\t\t,QUOTENAME(COLUMN_NAME) \t\t\t\t\t\t,' IS NULL THEN 1 ELSE 0 END)), CONVERT(BIGINT, 0)) AS NullCount  \t\t\t\t\t\t \t\t\t\t\t\t,COALESCE(CONVERT(NVARCHAR(MAX), MIN(' \t\t\t\t\t\t,QUOTENAME(COLUMN_NAME) \t\t\t\t\t\t,')), '''') AS [MinValue] \t\t\t\t\t\t,COALESCE(CONVERT(NVARCHAR(MAX), MAX(' \t\t\t\t\t\t,QUOTENAME(COLUMN_NAME) \t\t\t\t\t\t,')), '''') AS [MaxValue] \t\t\t\t\t\t,COALESCE(MIN(DATALENGTH(' \t\t\t\t\t\t,QUOTENAME(COLUMN_NAME) \t\t\t\t\t\t,')), 0) AS [MinLength] \t\t\t\t\t\t,COALESCE(MAX(DATALENGTH(' \t\t\t\t\t\t,QUOTENAME(COLUMN_NAME) \t\t\t\t\t\t,')), 0) AS [MaxLength] \t\t\t\t\t\t \t\t\t\t\t\t \t\t\t\t\t\t,AVG(CASE WHEN ''' \t\t\t\t\t\t,DATA_TYPE \t\t\t\t\t\t,''' IN (''char'', ''varchar'', ''nvarchar'') THEN CONVERT(NUMERIC(30,2), NULL) ELSE ' \t\t\t\t\t\t,QUOTENAME(COLUMN_NAME) \t\t\t\t\t\t,' END) AS DataAverage \t\t\t\t\t\t \t\t\t\t\t\t,STDEVP(CASE WHEN ''' \t\t\t\t\t\t,DATA_TYPE \t\t\t\t\t\t,''' IN (''char'', ''varchar'', ''nvarchar'') THEN CONVERT(FLOAT, NULL) ELSE ' \t\t\t\t\t\t,QUOTENAME(COLUMN_NAME) \t\t\t\t\t\t,' END) AS DataStdevp\t\t\t\t\t\t,' \t\t\t\t\t\t,@RowCount \t\t\t\t\t\t,' AS TableRowCount,' \t\t\t\t\t\t,@TableDataSpaceGB \t\t\t\t\t\t,' AS TableDataSpaceGB  \t\t\t\t\t\t\t\tFROM ' \t\t\t\t\t\t,QUOTENAME(TABLE_SCHEMA) \t\t\t\t\t\t,'.' \t\t\t\t\t\t,QUOTENAME(TABLE_NAME) \t\t\t\t\t\t,'' \t\t\t\t\t\t)), ' UNION ') \t\t\t,') AS a) AS a' \t\t\t,' OPTION (LABEL = ''' \t\t\t,CONCAT ( \t\t\t\t'Data Profile - ' \t\t\t\t,QUOTENAME(@SchemaNameStaging) \t\t\t\t,'.' \t\t\t\t,QUOTENAME(@TableNameStaging) \t\t\t\t,' - {PipelineRunId}' \t\t\t\t) \t\t\t,''')' \t\t\t) AS sqlString \tFROM INFORMATION_SCHEMA.COLUMNS \tWHERE TABLE_SCHEMA = @SchemaNameStaging \t\tAND TABLE_NAME = @TableNameStaging \t\tAND ( \t\t\tDATA_TYPE IN ( \t\t\t\t'int' \t\t\t\t,'bigint' \t\t\t\t,'char' \t\t\t\t,'varchar' \t\t\t\t,'nvarchar' \t\t\t\t) \t\t\tOR NUMERIC_SCALE = 0 \t\t\t) /*AND COLUMN_NAME NOT LIKE '%date%' \t\tAND COLUMN_NAME NOT LIKE '%time%'*/ \t) AS a;/*SELECT @sql*/  EXEC (@sql);  INSERT INTO logging.DataProfile SELECT '{PipelineRunId}' AS PipelineRunId \t,'{PipelineStartDate}' AS PipelineStartDate \t,'{PipelineStartDateTime}' AS PipelineStartDateTime \t,@SchemaNameStaging AS SchemaName \t,@TableNameStaging AS TableName \t,ColName \t,DataTypeName \t,DataTypeFull \t,CharacterLength \t,PrecisionValue \t,ScaleValue \t,UniqueValueCount \t,NullCount \t,MinValue \t,MaxValue \t,MinLength \t,MaxLength \t,DataAverage \t,DataStdevp \t,TableRowCount \t,TableDataSpaceGB \t,WeightedScore \t,CONCAT ( \t\t@sql \t\t,'; SELECT * FROM #temp ORDER BY WeightedScore' \t\t) AS SqlCommand \t,GETDATE() AS RowInsertDateTime FROM #temp;  IF @RowCount >= 60000000 BEGIN /*Run this if row count is greater than 60M and data size on disk is less that 2GB*/ \tSELECT @sql = 'SELECT TOP 1 @Distribution = CONCAT('' WITH ( DISTRIBUTION = HASH('', ColName, ''), CLUSTERED COLUMNSTORE INDEX ) '') FROM #temp WHERE ColName NOT LIKE ''%date%'' AND ColName NOT LIKE ''%time%'' ORDER BY WeightedScore' \tFROM #temp \tWHERE ( \t\t\tColName NOT LIKE '%time%' \t\t\tAND ColName NOT LIKE '%date%' \t\t\t) /*Will need to be tweaked*/  \tEXEC sp_executesql @Query = @sql \t\t,@Params = N'@Distribution NVARCHAR(MAX) OUTPUT' \t\t,@Distribution = @Distribution OUTPUT END ELSE IF @RowCount < 60000000 \tAND @TableDataSpaceGB > 2 BEGIN \tSELECT @sql = 'SELECT TOP 1 @Distribution = CONCAT('' WITH ( DISTRIBUTION = HASH('', ColName, ''), CLUSTERED INDEX('', ColName, '') ) '') FROM #temp ORDER BY WeightedScore' \tFROM #temp  \tEXEC sp_executesql @Query = @sql \t\t,@Params = N'@Distribution NVARCHAR(MAX) OUTPUT' \t\t,@Distribution = @Distribution OUTPUT END ELSE BEGIN \tSELECT @sql = 'SELECT TOP 1 @Distribution = CONCAT('' WITH ( DISTRIBUTION = REPLICATE, CLUSTERED INDEX('', ColName, '') ) '') FROM #temp ORDER BY WeightedScore' \tFROM #temp  \tEXEC sp_executesql @Query = @sql \t\t,@Params = N'@Distribution NVARCHAR(MAX) OUTPUT' \t\t,@Distribution = @Distribution OUTPUT END  SELECT @Distribution AS DistributionIndex;"
            },
            "DatabaseName": {
                "type": "String",
                "defaultValue": "REPLACE_SYNAPSE_ANALYTICS_SQL_POOL_NAME"
            }
        },
        "annotations": []
    }
}